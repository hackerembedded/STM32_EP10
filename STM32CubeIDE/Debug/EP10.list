
EP10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d28  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004de4  08004de4  00005de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec0  08004ec0  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ec0  08004ec0  00005ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ec8  08004ec8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec8  08004ec8  00005ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ecc  08004ecc  00005ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ed0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08004edc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004edc  00006178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d77  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa2  00000000  00000000  00018dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0001b850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d22  00000000  00000000  0001c928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c95  00000000  00000000  0001d64a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156f5  00000000  00000000  000372df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7b3a  00000000  00000000  0004c9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f450e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca8  00000000  00000000  000f4554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f81fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004dcc 	.word	0x08004dcc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004dcc 	.word	0x08004dcc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	0018      	movs	r0, r3
 8000626:	230c      	movs	r3, #12
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f004 fba2 	bl	8004d74 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000630:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 8000632:	4a2c      	ldr	r2, [pc, #176]	@ (80006e4 <MX_ADC1_Init+0xc8>)
 8000634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000636:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 8000638:	2280      	movs	r2, #128	@ 0x80
 800063a:	05d2      	lsls	r2, r2, #23
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b26      	ldr	r3, [pc, #152]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064a:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 8000652:	2204      	movs	r2, #4
 8000654:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000656:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800065c:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 800065e:	2200      	movs	r2, #0
 8000660:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 8000664:	2201      	movs	r2, #1
 8000666:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000668:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 800066a:	2201      	movs	r2, #1
 800066c:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066e:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 8000670:	2200      	movs	r2, #0
 8000672:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000674:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 8000676:	2200      	movs	r2, #0
 8000678:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 800067c:	222c      	movs	r2, #44	@ 0x2c
 800067e:	2100      	movs	r1, #0
 8000680:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000682:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 8000684:	2200      	movs	r2, #0
 8000686:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 8000688:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 800068a:	2203      	movs	r2, #3
 800068c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800068e:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 8000690:	2200      	movs	r2, #0
 8000692:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 8000696:	223c      	movs	r2, #60	@ 0x3c
 8000698:	2100      	movs	r1, #0
 800069a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800069c:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a2:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fd27 	bl	80010f8 <HAL_ADC_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80006ae:	f000 f949 	bl	8000944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c4:	1d3a      	adds	r2, r7, #4
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <MX_ADC1_Init+0xc4>)
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 ffaa 	bl	8001624 <HAL_ADC_ConfigChannel>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80006d4:	f000 f936 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d8:	46c0      	nop			@ (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b004      	add	sp, #16
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000028 	.word	0x20000028
 80006e4:	40012400 	.word	0x40012400

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b08b      	sub	sp, #44	@ 0x2c
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	2414      	movs	r4, #20
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	0018      	movs	r0, r3
 80006f6:	2314      	movs	r3, #20
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f004 fb3a 	bl	8004d74 <memset>
  if(adcHandle->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a18      	ldr	r2, [pc, #96]	@ (8000768 <HAL_ADC_MspInit+0x80>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d129      	bne.n	800075e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <HAL_ADC_MspInit+0x84>)
 800070c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <HAL_ADC_MspInit+0x84>)
 8000710:	2180      	movs	r1, #128	@ 0x80
 8000712:	0349      	lsls	r1, r1, #13
 8000714:	430a      	orrs	r2, r1
 8000716:	641a      	str	r2, [r3, #64]	@ 0x40
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <HAL_ADC_MspInit+0x84>)
 800071a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800071c:	2380      	movs	r3, #128	@ 0x80
 800071e:	035b      	lsls	r3, r3, #13
 8000720:	4013      	ands	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <HAL_ADC_MspInit+0x84>)
 8000728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <HAL_ADC_MspInit+0x84>)
 800072c:	2101      	movs	r1, #1
 800072e:	430a      	orrs	r2, r1
 8000730:	635a      	str	r2, [r3, #52]	@ 0x34
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <HAL_ADC_MspInit+0x84>)
 8000734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000736:	2201      	movs	r2, #1
 8000738:	4013      	ands	r3, r2
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2203      	movs	r2, #3
 8000748:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	193a      	adds	r2, r7, r4
 8000752:	23a0      	movs	r3, #160	@ 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f001 fc67 	bl	800202c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b00b      	add	sp, #44	@ 0x2c
 8000764:	bd90      	pop	{r4, r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	40012400 	.word	0x40012400
 800076c:	40021000 	.word	0x40021000

08000770 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b089      	sub	sp, #36	@ 0x24
 8000774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	240c      	movs	r4, #12
 8000778:	193b      	adds	r3, r7, r4
 800077a:	0018      	movs	r0, r3
 800077c:	2314      	movs	r3, #20
 800077e:	001a      	movs	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	f004 faf7 	bl	8004d74 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <MX_GPIO_Init+0x84>)
 8000788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800078a:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <MX_GPIO_Init+0x84>)
 800078c:	2101      	movs	r1, #1
 800078e:	430a      	orrs	r2, r1
 8000790:	635a      	str	r2, [r3, #52]	@ 0x34
 8000792:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_GPIO_Init+0x84>)
 8000794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000796:	2201      	movs	r2, #1
 8000798:	4013      	ands	r3, r2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_GPIO_Init+0x84>)
 80007a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007a2:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_GPIO_Init+0x84>)
 80007a4:	2102      	movs	r1, #2
 80007a6:	430a      	orrs	r2, r1
 80007a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_GPIO_Init+0x84>)
 80007ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ae:	2202      	movs	r2, #2
 80007b0:	4013      	ands	r3, r2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80007b6:	23a0      	movs	r3, #160	@ 0xa0
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fd98 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80007c4:	0021      	movs	r1, r4
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2220      	movs	r2, #32
 80007ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2201      	movs	r2, #1
 80007d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80007de:	187a      	adds	r2, r7, r1
 80007e0:	23a0      	movs	r3, #160	@ 0xa0
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 fc20 	bl	800202c <HAL_GPIO_Init>

}
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b009      	add	sp, #36	@ 0x24
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	40021000 	.word	0x40021000

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f000 fa9e 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f842 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f7ff ffb4 	bl	8000770 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000808:	f7ff ff08 	bl	800061c <MX_ADC1_Init>
  MX_TIM3_Init();
 800080c:	f000 f8de 	bl	80009cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000810:	f000 f9b8 	bl	8000b84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <main+0x78>)
 8000816:	0018      	movs	r0, r3
 8000818:	f001 fa58 	bl	8001ccc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <main+0x78>)
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fe12 	bl	8001448 <HAL_ADC_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000824:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <main+0x7c>)
 8000826:	2108      	movs	r1, #8
 8000828:	0018      	movs	r0, r3
 800082a:	f002 fd01 	bl	8003230 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <main+0x78>)
 8000830:	2164      	movs	r1, #100	@ 0x64
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fe56 	bl	80014e4 <HAL_ADC_PollForConversion>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d1f8      	bne.n	800082e <main+0x36>
	  {
		  adcValue = HAL_ADC_GetValue(&hadc1);
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <main+0x78>)
 800083e:	0018      	movs	r0, r3
 8000840:	f000 fee4 	bl	800160c <HAL_ADC_GetValue>
 8000844:	0002      	movs	r2, r0
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <main+0x80>)
 8000848:	601a      	str	r2, [r3, #0]
		  pwmValue = (adcValue * 9999) / 4095;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <main+0x80>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <main+0x84>)
 8000850:	4353      	muls	r3, r2
 8000852:	490b      	ldr	r1, [pc, #44]	@ (8000880 <main+0x88>)
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff fc55 	bl	8000104 <__udivsi3>
 800085a:	0003      	movs	r3, r0
 800085c:	001a      	movs	r2, r3
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <main+0x8c>)
 8000860:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwmValue);
 8000862:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <main+0x7c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a07      	ldr	r2, [pc, #28]	@ (8000884 <main+0x8c>)
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	63da      	str	r2, [r3, #60]	@ 0x3c
	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800086c:	e7df      	b.n	800082e <main+0x36>
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	20000028 	.word	0x20000028
 8000874:	20000094 	.word	0x20000094
 8000878:	2000008c 	.word	0x2000008c
 800087c:	0000270f 	.word	0x0000270f
 8000880:	00000fff 	.word	0x00000fff
 8000884:	20000090 	.word	0x20000090

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b093      	sub	sp, #76	@ 0x4c
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	2410      	movs	r4, #16
 8000890:	193b      	adds	r3, r7, r4
 8000892:	0018      	movs	r0, r3
 8000894:	2338      	movs	r3, #56	@ 0x38
 8000896:	001a      	movs	r2, r3
 8000898:	2100      	movs	r1, #0
 800089a:	f004 fa6b 	bl	8004d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089e:	003b      	movs	r3, r7
 80008a0:	0018      	movs	r0, r3
 80008a2:	2310      	movs	r3, #16
 80008a4:	001a      	movs	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f004 fa64 	bl	8004d74 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 fd3d 	bl	8002330 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	2202      	movs	r2, #2
 80008ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	0052      	lsls	r2, r2, #1
 80008c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008c4:	0021      	movs	r1, r4
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2240      	movs	r2, #64	@ 0x40
 80008d0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2202      	movs	r2, #2
 80008d6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2202      	movs	r2, #2
 80008dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2208      	movs	r2, #8
 80008e8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2280      	movs	r2, #128	@ 0x80
 80008ee:	0292      	lsls	r2, r2, #10
 80008f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	0492      	lsls	r2, r2, #18
 80008f8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2280      	movs	r2, #128	@ 0x80
 80008fe:	0592      	lsls	r2, r2, #22
 8000900:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	187b      	adds	r3, r7, r1
 8000904:	0018      	movs	r0, r3
 8000906:	f001 fd5f 	bl	80023c8 <HAL_RCC_OscConfig>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800090e:	f000 f819 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000912:	003b      	movs	r3, r7
 8000914:	2207      	movs	r2, #7
 8000916:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	003b      	movs	r3, r7
 800091a:	2202      	movs	r2, #2
 800091c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	003b      	movs	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000924:	003b      	movs	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092a:	003b      	movs	r3, r7
 800092c:	2102      	movs	r1, #2
 800092e:	0018      	movs	r0, r3
 8000930:	f002 f864 	bl	80029fc <HAL_RCC_ClockConfig>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000938:	f000 f804 	bl	8000944 <Error_Handler>
  }
}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b013      	add	sp, #76	@ 0x4c
 8000942:	bd90      	pop	{r4, r7, pc}

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	e7fd      	b.n	800094c <Error_Handler+0x8>

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <HAL_MspInit+0x44>)
 8000958:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <HAL_MspInit+0x44>)
 800095c:	2101      	movs	r1, #1
 800095e:	430a      	orrs	r2, r1
 8000960:	641a      	str	r2, [r3, #64]	@ 0x40
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <HAL_MspInit+0x44>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	2201      	movs	r2, #1
 8000968:	4013      	ands	r3, r2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <HAL_MspInit+0x44>)
 8000970:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <HAL_MspInit+0x44>)
 8000974:	2180      	movs	r1, #128	@ 0x80
 8000976:	0549      	lsls	r1, r1, #21
 8000978:	430a      	orrs	r2, r1
 800097a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_MspInit+0x44>)
 800097e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	055b      	lsls	r3, r3, #21
 8000984:	4013      	ands	r3, r2
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	40021000 	.word	0x40021000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800099c:	46c0      	nop			@ (mov r8, r8)
 800099e:	e7fd      	b.n	800099c <NMI_Handler+0x4>

080009a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	e7fd      	b.n	80009a4 <HardFault_Handler+0x4>

080009a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009ac:	46c0      	nop			@ (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 fa26 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	46c0      	nop			@ (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	@ 0x38
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	2328      	movs	r3, #40	@ 0x28
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	0018      	movs	r0, r3
 80009d8:	2310      	movs	r3, #16
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f004 f9c9 	bl	8004d74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e2:	231c      	movs	r3, #28
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	0018      	movs	r0, r3
 80009e8:	230c      	movs	r3, #12
 80009ea:	001a      	movs	r2, r3
 80009ec:	2100      	movs	r1, #0
 80009ee:	f004 f9c1 	bl	8004d74 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f2:	003b      	movs	r3, r7
 80009f4:	0018      	movs	r0, r3
 80009f6:	231c      	movs	r3, #28
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f004 f9ba 	bl	8004d74 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a00:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 8000a02:	4a30      	ldr	r2, [pc, #192]	@ (8000ac4 <MX_TIM3_Init+0xf8>)
 8000a04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000a06:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 8000a08:	223f      	movs	r2, #63	@ 0x3f
 8000a0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000a12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 8000a14:	4a2c      	ldr	r2, [pc, #176]	@ (8000ac8 <MX_TIM3_Init+0xfc>)
 8000a16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b29      	ldr	r3, [pc, #164]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b28      	ldr	r3, [pc, #160]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a24:	4b26      	ldr	r3, [pc, #152]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 fb4a 	bl	80030c0 <HAL_TIM_Base_Init>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a30:	f7ff ff88 	bl	8000944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a34:	2128      	movs	r1, #40	@ 0x28
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2280      	movs	r2, #128	@ 0x80
 8000a3a:	0152      	lsls	r2, r2, #5
 8000a3c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a3e:	187a      	adds	r2, r7, r1
 8000a40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f002 fddd 	bl	8003604 <HAL_TIM_ConfigClockSource>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000a4e:	f7ff ff79 	bl	8000944 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f002 fb8b 	bl	8003170 <HAL_TIM_PWM_Init>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a5e:	f7ff ff71 	bl	8000944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a62:	211c      	movs	r1, #28
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a70:	187a      	adds	r2, r7, r1
 8000a72:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f003 faac 	bl	8003fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000a80:	f7ff ff60 	bl	8000944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a84:	003b      	movs	r3, r7
 8000a86:	2260      	movs	r2, #96	@ 0x60
 8000a88:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a8a:	003b      	movs	r3, r7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a90:	003b      	movs	r3, r7
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a96:	003b      	movs	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a9c:	0039      	movs	r1, r7
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f002 fcae 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000aac:	f7ff ff4a 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <MX_TIM3_Init+0xf4>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 f828 	bl	8000b08 <HAL_TIM_MspPostInit>

}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b00e      	add	sp, #56	@ 0x38
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000094 	.word	0x20000094
 8000ac4:	40000400 	.word	0x40000400
 8000ac8:	0000270f 	.word	0x0000270f

08000acc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a09      	ldr	r2, [pc, #36]	@ (8000b00 <HAL_TIM_Base_MspInit+0x34>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d10b      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_TIM_Base_MspInit+0x38>)
 8000ae0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <HAL_TIM_Base_MspInit+0x38>)
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_TIM_Base_MspInit+0x38>)
 8000aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000aee:	2202      	movs	r2, #2
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b004      	add	sp, #16
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	40000400 	.word	0x40000400
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b089      	sub	sp, #36	@ 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	240c      	movs	r4, #12
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	0018      	movs	r0, r3
 8000b16:	2314      	movs	r3, #20
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f004 f92a 	bl	8004d74 <memset>
  if(timHandle->Instance==TIM3)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <HAL_TIM_MspPostInit+0x70>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d121      	bne.n	8000b6e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <HAL_TIM_MspPostInit+0x74>)
 8000b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <HAL_TIM_MspPostInit+0x74>)
 8000b30:	2102      	movs	r1, #2
 8000b32:	430a      	orrs	r2, r1
 8000b34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <HAL_TIM_MspPostInit+0x74>)
 8000b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b42:	0021      	movs	r1, r4
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	4a06      	ldr	r2, [pc, #24]	@ (8000b80 <HAL_TIM_MspPostInit+0x78>)
 8000b66:	0019      	movs	r1, r3
 8000b68:	0010      	movs	r0, r2
 8000b6a:	f001 fa5f 	bl	800202c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b009      	add	sp, #36	@ 0x24
 8000b74:	bd90      	pop	{r4, r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	40000400 	.word	0x40000400
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	50000400 	.word	0x50000400

08000b84 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000b8a:	4a24      	ldr	r2, [pc, #144]	@ (8000c1c <MX_USART2_UART_Init+0x98>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8e:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000b90:	22e1      	movs	r2, #225	@ 0xe1
 8000b92:	0252      	lsls	r2, r2, #9
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f003 fa6e 	bl	80040b0 <HAL_UART_Init>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bd8:	f7ff feb4 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bde:	2100      	movs	r1, #0
 8000be0:	0018      	movs	r0, r3
 8000be2:	f003 ffe7 	bl	8004bb4 <HAL_UARTEx_SetTxFifoThreshold>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bea:	f7ff feab 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f004 f81e 	bl	8004c34 <HAL_UARTEx_SetRxFifoThreshold>
 8000bf8:	1e03      	subs	r3, r0, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bfc:	f7ff fea2 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <MX_USART2_UART_Init+0x94>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f003 ff9c 	bl	8004b40 <HAL_UARTEx_DisableFifoMode>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c0c:	f7ff fe9a 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	200000e0 	.word	0x200000e0
 8000c1c:	40004400 	.word	0x40004400

08000c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b097      	sub	sp, #92	@ 0x5c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	2344      	movs	r3, #68	@ 0x44
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	2314      	movs	r3, #20
 8000c30:	001a      	movs	r2, r3
 8000c32:	2100      	movs	r1, #0
 8000c34:	f004 f89e 	bl	8004d74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c38:	2410      	movs	r4, #16
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	2334      	movs	r3, #52	@ 0x34
 8000c40:	001a      	movs	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f004 f896 	bl	8004d74 <memset>
  if(uartHandle->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a22      	ldr	r2, [pc, #136]	@ (8000cd8 <HAL_UART_MspInit+0xb8>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d13e      	bne.n	8000cd0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2202      	movs	r2, #2
 8000c56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	0018      	movs	r0, r3
 8000c62:	f002 f875 	bl	8002d50 <HAL_RCCEx_PeriphCLKConfig>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c6a:	f7ff fe6b 	bl	8000944 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <HAL_UART_MspInit+0xbc>)
 8000c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c72:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <HAL_UART_MspInit+0xbc>)
 8000c74:	2180      	movs	r1, #128	@ 0x80
 8000c76:	0289      	lsls	r1, r1, #10
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <HAL_UART_MspInit+0xbc>)
 8000c7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c80:	2380      	movs	r3, #128	@ 0x80
 8000c82:	029b      	lsls	r3, r3, #10
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_UART_MspInit+0xbc>)
 8000c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <HAL_UART_MspInit+0xbc>)
 8000c90:	2101      	movs	r1, #1
 8000c92:	430a      	orrs	r2, r1
 8000c94:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_UART_MspInit+0xbc>)
 8000c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ca2:	2144      	movs	r1, #68	@ 0x44
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2202      	movs	r2, #2
 8000cae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	187a      	adds	r2, r7, r1
 8000cc4:	23a0      	movs	r3, #160	@ 0xa0
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f001 f9ae 	bl	800202c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b017      	add	sp, #92	@ 0x5c
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce0:	480d      	ldr	r0, [pc, #52]	@ (8000d18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ce2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce4:	f000 f825 	bl	8000d32 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce8:	480c      	ldr	r0, [pc, #48]	@ (8000d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cea:	490d      	ldr	r1, [pc, #52]	@ (8000d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cec:	4a0d      	ldr	r2, [pc, #52]	@ (8000d24 <LoopForever+0xe>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d00:	4c0a      	ldr	r4, [pc, #40]	@ (8000d2c <LoopForever+0x16>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d0e:	f004 f839 	bl	8004d84 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d12:	f7ff fd71 	bl	80007f8 <main>

08000d16 <LoopForever>:

LoopForever:
  b LoopForever
 8000d16:	e7fe      	b.n	8000d16 <LoopForever>
  ldr   r0, =_estack
 8000d18:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d24:	08004ed0 	.word	0x08004ed0
  ldr r2, =_sbss
 8000d28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d2c:	20000178 	.word	0x20000178

08000d30 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_COMP_IRQHandler>

08000d32 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <HAL_Init+0x3c>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_Init+0x3c>)
 8000d4e:	2180      	movs	r1, #128	@ 0x80
 8000d50:	0049      	lsls	r1, r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d56:	2003      	movs	r0, #3
 8000d58:	f000 f810 	bl	8000d7c <HAL_InitTick>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e001      	b.n	8000d6c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d68:	f7ff fdf2 	bl	8000950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	781b      	ldrb	r3, [r3, #0]
}
 8000d70:	0018      	movs	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d84:	230f      	movs	r3, #15
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <HAL_InitTick+0x88>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d02b      	beq.n	8000dec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d94:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_InitTick+0x8c>)
 8000d96:	681c      	ldr	r4, [r3, #0]
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <HAL_InitTick+0x88>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	0019      	movs	r1, r3
 8000d9e:	23fa      	movs	r3, #250	@ 0xfa
 8000da0:	0098      	lsls	r0, r3, #2
 8000da2:	f7ff f9af 	bl	8000104 <__udivsi3>
 8000da6:	0003      	movs	r3, r0
 8000da8:	0019      	movs	r1, r3
 8000daa:	0020      	movs	r0, r4
 8000dac:	f7ff f9aa 	bl	8000104 <__udivsi3>
 8000db0:	0003      	movs	r3, r0
 8000db2:	0018      	movs	r0, r3
 8000db4:	f001 f92d 	bl	8002012 <HAL_SYSTICK_Config>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d112      	bne.n	8000de2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d80a      	bhi.n	8000dd8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	2200      	movs	r2, #0
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f001 f90c 	bl	8001fe8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HAL_InitTick+0x90>)
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	e00d      	b.n	8000df4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e008      	b.n	8000df4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000de2:	230f      	movs	r3, #15
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e003      	b.n	8000df4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dec:	230f      	movs	r3, #15
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000df4:	230f      	movs	r3, #15
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	781b      	ldrb	r3, [r3, #0]
}
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b005      	add	sp, #20
 8000e00:	bd90      	pop	{r4, r7, pc}
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000004 	.word	0x20000004

08000e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <HAL_IncTick+0x1c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	001a      	movs	r2, r3
 8000e1a:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <HAL_IncTick+0x20>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	18d2      	adds	r2, r2, r3
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <HAL_IncTick+0x20>)
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000174 	.word	0x20000174

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b02      	ldr	r3, [pc, #8]	@ (8000e44 <HAL_GetTick+0x10>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	20000174 	.word	0x20000174

08000e48 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e58:	401a      	ands	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	601a      	str	r2, [r3, #0]
}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	fe3fffff 	.word	0xfe3fffff

08000e70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	23e0      	movs	r3, #224	@ 0xe0
 8000e7e:	045b      	lsls	r3, r3, #17
 8000e80:	4013      	ands	r3, r2
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	400a      	ands	r2, r1
 8000ea0:	2107      	movs	r1, #7
 8000ea2:	4091      	lsls	r1, r2
 8000ea4:	000a      	movs	r2, r1
 8000ea6:	43d2      	mvns	r2, r2
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2104      	movs	r1, #4
 8000eae:	400b      	ands	r3, r1
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	4099      	lsls	r1, r3
 8000eb4:	000b      	movs	r3, r1
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b004      	add	sp, #16
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	400a      	ands	r2, r1
 8000ed8:	2107      	movs	r1, #7
 8000eda:	4091      	lsls	r1, r2
 8000edc:	000a      	movs	r2, r1
 8000ede:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ee6:	40da      	lsrs	r2, r3
 8000ee8:	0013      	movs	r3, r2
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	23c0      	movs	r3, #192	@ 0xc0
 8000f00:	011b      	lsls	r3, r3, #4
 8000f02:	4013      	ands	r3, r2
 8000f04:	d101      	bne.n	8000f0a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	211f      	movs	r1, #31
 8000f28:	400a      	ands	r2, r1
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	4091      	lsls	r1, r2
 8000f2e:	000a      	movs	r2, r1
 8000f30:	43d2      	mvns	r2, r2
 8000f32:	401a      	ands	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	0e9b      	lsrs	r3, r3, #26
 8000f38:	210f      	movs	r1, #15
 8000f3a:	4019      	ands	r1, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	201f      	movs	r0, #31
 8000f40:	4003      	ands	r3, r0
 8000f42:	4099      	lsls	r1, r3
 8000f44:	000b      	movs	r3, r1
 8000f46:	431a      	orrs	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b004      	add	sp, #16
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	035b      	lsls	r3, r3, #13
 8000f66:	0b5b      	lsrs	r3, r3, #13
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	0352      	lsls	r2, r2, #13
 8000f88:	0b52      	lsrs	r2, r2, #13
 8000f8a:	43d2      	mvns	r2, r2
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	0212      	lsls	r2, r2, #8
 8000fb0:	43d2      	mvns	r2, r2
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	400b      	ands	r3, r1
 8000fbc:	4904      	ldr	r1, [pc, #16]	@ (8000fd0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b004      	add	sp, #16
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	07ffff00 	.word	0x07ffff00

08000fd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2280      	movs	r2, #128	@ 0x80
 8000fe6:	0552      	lsls	r2, r2, #21
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	6fffffe8 	.word	0x6fffffe8

08000ffc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	2380      	movs	r3, #128	@ 0x80
 800100a:	055b      	lsls	r3, r3, #21
 800100c:	401a      	ands	r2, r3
 800100e:	2380      	movs	r3, #128	@ 0x80
 8001010:	055b      	lsls	r3, r3, #21
 8001012:	429a      	cmp	r2, r3
 8001014:	d101      	bne.n	800101a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800101a:	2300      	movs	r3, #0
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}

08001024 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <LL_ADC_Enable+0x20>)
 8001032:	4013      	ands	r3, r2
 8001034:	2201      	movs	r2, #1
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}
 8001044:	7fffffe8 	.word	0x7fffffe8

08001048 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <LL_ADC_Disable+0x20>)
 8001056:	4013      	ands	r3, r2
 8001058:	2202      	movs	r2, #2
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001060:	46c0      	nop			@ (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}
 8001068:	7fffffe8 	.word	0x7fffffe8

0800106c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	2201      	movs	r2, #1
 800107a:	4013      	ands	r3, r2
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <LL_ADC_IsEnabled+0x18>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <LL_ADC_IsEnabled+0x1a>
 8001084:	2300      	movs	r3, #0
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}

0800108e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2202      	movs	r2, #2
 800109c:	4013      	ands	r3, r2
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d101      	bne.n	80010a6 <LL_ADC_IsDisableOngoing+0x18>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <LL_ADC_IsDisableOngoing+0x1a>
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <LL_ADC_REG_StartConversion+0x20>)
 80010be:	4013      	ands	r3, r2
 80010c0:	2204      	movs	r2, #4
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b002      	add	sp, #8
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	7fffffe8 	.word	0x7fffffe8

080010d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2204      	movs	r2, #4
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d101      	bne.n	80010ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001100:	231f      	movs	r3, #31
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e17f      	b.n	800141e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10a      	bne.n	800113c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff fadd 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2254      	movs	r2, #84	@ 0x54
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff ff5b 	bl	8000ffc <LL_ADC_IsInternalRegulatorEnabled>
 8001146:	1e03      	subs	r3, r0, #0
 8001148:	d115      	bne.n	8001176 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff ff40 	bl	8000fd4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001154:	4bb4      	ldr	r3, [pc, #720]	@ (8001428 <HAL_ADC_Init+0x330>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	49b4      	ldr	r1, [pc, #720]	@ (800142c <HAL_ADC_Init+0x334>)
 800115a:	0018      	movs	r0, r3
 800115c:	f7fe ffd2 	bl	8000104 <__udivsi3>
 8001160:	0003      	movs	r3, r0
 8001162:	3301      	adds	r3, #1
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001168:	e002      	b.n	8001170 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3b01      	subs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f9      	bne.n	800116a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	0018      	movs	r0, r3
 800117c:	f7ff ff3e 	bl	8000ffc <LL_ADC_IsInternalRegulatorEnabled>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d10f      	bne.n	80011a4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001188:	2210      	movs	r2, #16
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001194:	2201      	movs	r2, #1
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800119c:	231f      	movs	r3, #31
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff ff93 	bl	80010d4 <LL_ADC_REG_IsConversionOngoing>
 80011ae:	0003      	movs	r3, r0
 80011b0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	2210      	movs	r2, #16
 80011b8:	4013      	ands	r3, r2
 80011ba:	d000      	beq.n	80011be <HAL_ADC_Init+0xc6>
 80011bc:	e122      	b.n	8001404 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d000      	beq.n	80011c6 <HAL_ADC_Init+0xce>
 80011c4:	e11e      	b.n	8001404 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ca:	4a99      	ldr	r2, [pc, #612]	@ (8001430 <HAL_ADC_Init+0x338>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	2202      	movs	r2, #2
 80011d0:	431a      	orrs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	0018      	movs	r0, r3
 80011dc:	f7ff ff46 	bl	800106c <LL_ADC_IsEnabled>
 80011e0:	1e03      	subs	r3, r0, #0
 80011e2:	d000      	beq.n	80011e6 <HAL_ADC_Init+0xee>
 80011e4:	e0ad      	b.n	8001342 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7e1b      	ldrb	r3, [r3, #24]
 80011ee:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80011f0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7e5b      	ldrb	r3, [r3, #25]
 80011f6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7e9b      	ldrb	r3, [r3, #26]
 80011fe:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001200:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <HAL_ADC_Init+0x118>
 800120a:	2380      	movs	r3, #128	@ 0x80
 800120c:	015b      	lsls	r3, r3, #5
 800120e:	e000      	b.n	8001212 <HAL_ADC_Init+0x11a>
 8001210:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001212:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001218:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b00      	cmp	r3, #0
 8001220:	da04      	bge.n	800122c <HAL_ADC_Init+0x134>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	085b      	lsrs	r3, r3, #1
 800122a:	e001      	b.n	8001230 <HAL_ADC_Init+0x138>
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001230:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	212c      	movs	r1, #44	@ 0x2c
 8001236:	5c5b      	ldrb	r3, [r3, r1]
 8001238:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800123a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2220      	movs	r2, #32
 8001246:	5c9b      	ldrb	r3, [r3, r2]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d115      	bne.n	8001278 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7e9b      	ldrb	r3, [r3, #26]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d105      	bne.n	8001260 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2280      	movs	r2, #128	@ 0x80
 8001258:	0252      	lsls	r2, r2, #9
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	e00b      	b.n	8001278 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001264:	2220      	movs	r2, #32
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001270:	2201      	movs	r2, #1
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00a      	beq.n	8001296 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001284:	23e0      	movs	r3, #224	@ 0xe0
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800128e:	4313      	orrs	r3, r2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	4a65      	ldr	r2, [pc, #404]	@ (8001434 <HAL_ADC_Init+0x33c>)
 800129e:	4013      	ands	r3, r2
 80012a0:	0019      	movs	r1, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	0f9b      	lsrs	r3, r3, #30
 80012b2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012b8:	4313      	orrs	r3, r2
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4313      	orrs	r3, r2
 80012be:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	223c      	movs	r2, #60	@ 0x3c
 80012c4:	5c9b      	ldrb	r3, [r3, r2]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d111      	bne.n	80012ee <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	0f9b      	lsrs	r3, r3, #30
 80012d0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012d6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80012dc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80012e2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	2201      	movs	r2, #1
 80012ea:	4313      	orrs	r3, r2
 80012ec:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	4a50      	ldr	r2, [pc, #320]	@ (8001438 <HAL_ADC_Init+0x340>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	0019      	movs	r1, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	430a      	orrs	r2, r1
 8001302:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	23c0      	movs	r3, #192	@ 0xc0
 800130a:	061b      	lsls	r3, r3, #24
 800130c:	429a      	cmp	r2, r3
 800130e:	d018      	beq.n	8001342 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	05db      	lsls	r3, r3, #23
 8001318:	429a      	cmp	r2, r3
 800131a:	d012      	beq.n	8001342 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001320:	2380      	movs	r3, #128	@ 0x80
 8001322:	061b      	lsls	r3, r3, #24
 8001324:	429a      	cmp	r2, r3
 8001326:	d00c      	beq.n	8001342 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001328:	4b44      	ldr	r3, [pc, #272]	@ (800143c <HAL_ADC_Init+0x344>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a44      	ldr	r2, [pc, #272]	@ (8001440 <HAL_ADC_Init+0x348>)
 800132e:	4013      	ands	r3, r2
 8001330:	0019      	movs	r1, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	23f0      	movs	r3, #240	@ 0xf0
 8001338:	039b      	lsls	r3, r3, #14
 800133a:	401a      	ands	r2, r3
 800133c:	4b3f      	ldr	r3, [pc, #252]	@ (800143c <HAL_ADC_Init+0x344>)
 800133e:	430a      	orrs	r2, r1
 8001340:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800134a:	001a      	movs	r2, r3
 800134c:	2100      	movs	r1, #0
 800134e:	f7ff fd9c 	bl	8000e8a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800135a:	493a      	ldr	r1, [pc, #232]	@ (8001444 <HAL_ADC_Init+0x34c>)
 800135c:	001a      	movs	r2, r3
 800135e:	f7ff fd94 	bl	8000e8a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2110      	movs	r1, #16
 8001376:	4249      	negs	r1, r1
 8001378:	430a      	orrs	r2, r1
 800137a:	629a      	str	r2, [r3, #40]	@ 0x28
 800137c:	e018      	b.n	80013b0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691a      	ldr	r2, [r3, #16]
 8001382:	2380      	movs	r3, #128	@ 0x80
 8001384:	039b      	lsls	r3, r3, #14
 8001386:	429a      	cmp	r2, r3
 8001388:	d112      	bne.n	80013b0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	3b01      	subs	r3, #1
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	221c      	movs	r2, #28
 800139a:	4013      	ands	r3, r2
 800139c:	2210      	movs	r2, #16
 800139e:	4252      	negs	r2, r2
 80013a0:	409a      	lsls	r2, r3
 80013a2:	0011      	movs	r1, r2
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2100      	movs	r1, #0
 80013b6:	0018      	movs	r0, r3
 80013b8:	f7ff fd84 	bl	8000ec4 <LL_ADC_GetSamplingTimeCommonChannels>
 80013bc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d10b      	bne.n	80013de <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d0:	2203      	movs	r2, #3
 80013d2:	4393      	bics	r3, r2
 80013d4:	2201      	movs	r2, #1
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013dc:	e01c      	b.n	8001418 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	2212      	movs	r2, #18
 80013e4:	4393      	bics	r3, r2
 80013e6:	2210      	movs	r2, #16
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013f2:	2201      	movs	r2, #1
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80013fa:	231f      	movs	r3, #31
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001402:	e009      	b.n	8001418 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001408:	2210      	movs	r2, #16
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001410:	231f      	movs	r3, #31
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001418:	231f      	movs	r3, #31
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	781b      	ldrb	r3, [r3, #0]
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b008      	add	sp, #32
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	20000000 	.word	0x20000000
 800142c:	00030d40 	.word	0x00030d40
 8001430:	fffffefd 	.word	0xfffffefd
 8001434:	ffde0201 	.word	0xffde0201
 8001438:	1ffffc02 	.word	0x1ffffc02
 800143c:	40012708 	.word	0x40012708
 8001440:	ffc3ffff 	.word	0xffc3ffff
 8001444:	07ffff04 	.word	0x07ffff04

08001448 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff fe3d 	bl	80010d4 <LL_ADC_REG_IsConversionOngoing>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d135      	bne.n	80014ca <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2254      	movs	r2, #84	@ 0x54
 8001462:	5c9b      	ldrb	r3, [r3, r2]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_ADC_Start+0x24>
 8001468:	2302      	movs	r3, #2
 800146a:	e035      	b.n	80014d8 <HAL_ADC_Start+0x90>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2254      	movs	r2, #84	@ 0x54
 8001470:	2101      	movs	r1, #1
 8001472:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001474:	250f      	movs	r5, #15
 8001476:	197c      	adds	r4, r7, r5
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	0018      	movs	r0, r3
 800147c:	f000 faaa 	bl	80019d4 <ADC_Enable>
 8001480:	0003      	movs	r3, r0
 8001482:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001484:	197b      	adds	r3, r7, r5
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d119      	bne.n	80014c0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001490:	4a13      	ldr	r2, [pc, #76]	@ (80014e0 <HAL_ADC_Start+0x98>)
 8001492:	4013      	ands	r3, r2
 8001494:	2280      	movs	r2, #128	@ 0x80
 8001496:	0052      	lsls	r2, r2, #1
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	221c      	movs	r2, #28
 80014aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2254      	movs	r2, #84	@ 0x54
 80014b0:	2100      	movs	r1, #0
 80014b2:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff fdf9 	bl	80010b0 <LL_ADC_REG_StartConversion>
 80014be:	e008      	b.n	80014d2 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2254      	movs	r2, #84	@ 0x54
 80014c4:	2100      	movs	r1, #0
 80014c6:	5499      	strb	r1, [r3, r2]
 80014c8:	e003      	b.n	80014d2 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014ca:	230f      	movs	r3, #15
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	2202      	movs	r2, #2
 80014d0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80014d2:	230f      	movs	r3, #15
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	781b      	ldrb	r3, [r3, #0]
}
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	b004      	add	sp, #16
 80014de:	bdb0      	pop	{r4, r5, r7, pc}
 80014e0:	fffff0fe 	.word	0xfffff0fe

080014e4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d102      	bne.n	80014fc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80014f6:	2308      	movs	r3, #8
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e00f      	b.n	800151c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2201      	movs	r2, #1
 8001504:	4013      	ands	r3, r2
 8001506:	d007      	beq.n	8001518 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150c:	2220      	movs	r2, #32
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e072      	b.n	80015fe <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001518:	2304      	movs	r3, #4
 800151a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800151c:	f7ff fc8a 	bl	8000e34 <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001524:	e01f      	b.n	8001566 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	d01c      	beq.n	8001566 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800152c:	f7ff fc82 	bl	8000e34 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d302      	bcc.n	8001542 <HAL_ADC_PollForConversion+0x5e>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d111      	bne.n	8001566 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4013      	ands	r3, r2
 800154c:	d10b      	bne.n	8001566 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	2204      	movs	r2, #4
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2254      	movs	r2, #84	@ 0x54
 800155e:	2100      	movs	r1, #0
 8001560:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e04b      	b.n	80015fe <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	d0d9      	beq.n	8001526 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	2280      	movs	r2, #128	@ 0x80
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff fcb4 	bl	8000ef2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800158a:	1e03      	subs	r3, r0, #0
 800158c:	d02e      	beq.n	80015ec <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7e9b      	ldrb	r3, [r3, #26]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d12a      	bne.n	80015ec <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2208      	movs	r2, #8
 800159e:	4013      	ands	r3, r2
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d123      	bne.n	80015ec <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff fd93 	bl	80010d4 <LL_ADC_REG_IsConversionOngoing>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d110      	bne.n	80015d4 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	210c      	movs	r1, #12
 80015be:	438a      	bics	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	4a10      	ldr	r2, [pc, #64]	@ (8001608 <HAL_ADC_PollForConversion+0x124>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	2201      	movs	r2, #1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80015d2:	e00b      	b.n	80015ec <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d8:	2220      	movs	r2, #32
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e4:	2201      	movs	r2, #1
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7e1b      	ldrb	r3, [r3, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d103      	bne.n	80015fc <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	220c      	movs	r2, #12
 80015fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b004      	add	sp, #16
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	fffffefe 	.word	0xfffffefe

0800160c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162e:	2317      	movs	r3, #23
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2254      	movs	r2, #84	@ 0x54
 800163e:	5c9b      	ldrb	r3, [r3, r2]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x24>
 8001644:	2302      	movs	r3, #2
 8001646:	e1c0      	b.n	80019ca <HAL_ADC_ConfigChannel+0x3a6>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2254      	movs	r2, #84	@ 0x54
 800164c:	2101      	movs	r1, #1
 800164e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff fd3d 	bl	80010d4 <LL_ADC_REG_IsConversionOngoing>
 800165a:	1e03      	subs	r3, r0, #0
 800165c:	d000      	beq.n	8001660 <HAL_ADC_ConfigChannel+0x3c>
 800165e:	e1a3      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d100      	bne.n	800166a <HAL_ADC_ConfigChannel+0x46>
 8001668:	e143      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691a      	ldr	r2, [r3, #16]
 800166e:	2380      	movs	r3, #128	@ 0x80
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	429a      	cmp	r2, r3
 8001674:	d004      	beq.n	8001680 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800167a:	4ac1      	ldr	r2, [pc, #772]	@ (8001980 <HAL_ADC_ConfigChannel+0x35c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d108      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	0019      	movs	r1, r3
 800168a:	0010      	movs	r0, r2
 800168c:	f7ff fc62 	bl	8000f54 <LL_ADC_REG_SetSequencerChAdd>
 8001690:	e0c9      	b.n	8001826 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	211f      	movs	r1, #31
 800169c:	400b      	ands	r3, r1
 800169e:	210f      	movs	r1, #15
 80016a0:	4099      	lsls	r1, r3
 80016a2:	000b      	movs	r3, r1
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4013      	ands	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	035b      	lsls	r3, r3, #13
 80016b0:	0b5b      	lsrs	r3, r3, #13
 80016b2:	d105      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x9c>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	0e9b      	lsrs	r3, r3, #26
 80016ba:	221f      	movs	r2, #31
 80016bc:	4013      	ands	r3, r2
 80016be:	e098      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2201      	movs	r2, #1
 80016c6:	4013      	ands	r3, r2
 80016c8:	d000      	beq.n	80016cc <HAL_ADC_ConfigChannel+0xa8>
 80016ca:	e091      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1cc>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2202      	movs	r2, #2
 80016d2:	4013      	ands	r3, r2
 80016d4:	d000      	beq.n	80016d8 <HAL_ADC_ConfigChannel+0xb4>
 80016d6:	e089      	b.n	80017ec <HAL_ADC_ConfigChannel+0x1c8>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2204      	movs	r2, #4
 80016de:	4013      	ands	r3, r2
 80016e0:	d000      	beq.n	80016e4 <HAL_ADC_ConfigChannel+0xc0>
 80016e2:	e081      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x1c4>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2208      	movs	r2, #8
 80016ea:	4013      	ands	r3, r2
 80016ec:	d000      	beq.n	80016f0 <HAL_ADC_ConfigChannel+0xcc>
 80016ee:	e079      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x1c0>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2210      	movs	r2, #16
 80016f6:	4013      	ands	r3, r2
 80016f8:	d000      	beq.n	80016fc <HAL_ADC_ConfigChannel+0xd8>
 80016fa:	e071      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x1bc>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2220      	movs	r2, #32
 8001702:	4013      	ands	r3, r2
 8001704:	d000      	beq.n	8001708 <HAL_ADC_ConfigChannel+0xe4>
 8001706:	e069      	b.n	80017dc <HAL_ADC_ConfigChannel+0x1b8>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2240      	movs	r2, #64	@ 0x40
 800170e:	4013      	ands	r3, r2
 8001710:	d000      	beq.n	8001714 <HAL_ADC_ConfigChannel+0xf0>
 8001712:	e061      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x1b4>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2280      	movs	r2, #128	@ 0x80
 800171a:	4013      	ands	r3, r2
 800171c:	d000      	beq.n	8001720 <HAL_ADC_ConfigChannel+0xfc>
 800171e:	e059      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x1b0>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4013      	ands	r3, r2
 800172a:	d151      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x1ac>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	@ 0x80
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d149      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x1a8>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4013      	ands	r3, r2
 8001742:	d141      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x1a4>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	@ 0x80
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	4013      	ands	r3, r2
 800174e:	d139      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1a0>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2380      	movs	r3, #128	@ 0x80
 8001756:	015b      	lsls	r3, r3, #5
 8001758:	4013      	ands	r3, r2
 800175a:	d131      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x19c>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	019b      	lsls	r3, r3, #6
 8001764:	4013      	ands	r3, r2
 8001766:	d129      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x198>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	01db      	lsls	r3, r3, #7
 8001770:	4013      	ands	r3, r2
 8001772:	d121      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x194>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	4013      	ands	r3, r2
 800177e:	d119      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x190>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	@ 0x80
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	4013      	ands	r3, r2
 800178a:	d111      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x18c>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	029b      	lsls	r3, r3, #10
 8001794:	4013      	ands	r3, r2
 8001796:	d109      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x188>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	@ 0x80
 800179e:	02db      	lsls	r3, r3, #11
 80017a0:	4013      	ands	r3, r2
 80017a2:	d001      	beq.n	80017a8 <HAL_ADC_ConfigChannel+0x184>
 80017a4:	2312      	movs	r3, #18
 80017a6:	e024      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017a8:	2300      	movs	r3, #0
 80017aa:	e022      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017ac:	2311      	movs	r3, #17
 80017ae:	e020      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017b0:	2310      	movs	r3, #16
 80017b2:	e01e      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017b4:	230f      	movs	r3, #15
 80017b6:	e01c      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017b8:	230e      	movs	r3, #14
 80017ba:	e01a      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017bc:	230d      	movs	r3, #13
 80017be:	e018      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017c0:	230c      	movs	r3, #12
 80017c2:	e016      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017c4:	230b      	movs	r3, #11
 80017c6:	e014      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017c8:	230a      	movs	r3, #10
 80017ca:	e012      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017cc:	2309      	movs	r3, #9
 80017ce:	e010      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017d0:	2308      	movs	r3, #8
 80017d2:	e00e      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017d4:	2307      	movs	r3, #7
 80017d6:	e00c      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017d8:	2306      	movs	r3, #6
 80017da:	e00a      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017dc:	2305      	movs	r3, #5
 80017de:	e008      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017e0:	2304      	movs	r3, #4
 80017e2:	e006      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017e4:	2303      	movs	r3, #3
 80017e6:	e004      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e002      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1ce>
 80017f0:	2300      	movs	r3, #0
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	6852      	ldr	r2, [r2, #4]
 80017f6:	201f      	movs	r0, #31
 80017f8:	4002      	ands	r2, r0
 80017fa:	4093      	lsls	r3, r2
 80017fc:	000a      	movs	r2, r1
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	429a      	cmp	r2, r3
 8001812:	d808      	bhi.n	8001826 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	6859      	ldr	r1, [r3, #4]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	001a      	movs	r2, r3
 8001822:	f7ff fb77 	bl	8000f14 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6819      	ldr	r1, [r3, #0]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	001a      	movs	r2, r3
 8001834:	f7ff fbb2 	bl	8000f9c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db00      	blt.n	8001842 <HAL_ADC_ConfigChannel+0x21e>
 8001840:	e0bc      	b.n	80019bc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001842:	4b50      	ldr	r3, [pc, #320]	@ (8001984 <HAL_ADC_ConfigChannel+0x360>)
 8001844:	0018      	movs	r0, r3
 8001846:	f7ff fb13 	bl	8000e70 <LL_ADC_GetCommonPathInternalCh>
 800184a:	0003      	movs	r3, r0
 800184c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a4d      	ldr	r2, [pc, #308]	@ (8001988 <HAL_ADC_ConfigChannel+0x364>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d122      	bne.n	800189e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	2380      	movs	r3, #128	@ 0x80
 800185c:	041b      	lsls	r3, r3, #16
 800185e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001860:	d11d      	bne.n	800189e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	2280      	movs	r2, #128	@ 0x80
 8001866:	0412      	lsls	r2, r2, #16
 8001868:	4313      	orrs	r3, r2
 800186a:	4a46      	ldr	r2, [pc, #280]	@ (8001984 <HAL_ADC_ConfigChannel+0x360>)
 800186c:	0019      	movs	r1, r3
 800186e:	0010      	movs	r0, r2
 8001870:	f7ff faea 	bl	8000e48 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001874:	4b45      	ldr	r3, [pc, #276]	@ (800198c <HAL_ADC_ConfigChannel+0x368>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4945      	ldr	r1, [pc, #276]	@ (8001990 <HAL_ADC_ConfigChannel+0x36c>)
 800187a:	0018      	movs	r0, r3
 800187c:	f7fe fc42 	bl	8000104 <__udivsi3>
 8001880:	0003      	movs	r3, r0
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	0013      	movs	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	189b      	adds	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800188e:	e002      	b.n	8001896 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3b01      	subs	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f9      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800189c:	e08e      	b.n	80019bc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a3c      	ldr	r2, [pc, #240]	@ (8001994 <HAL_ADC_ConfigChannel+0x370>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d10e      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	2380      	movs	r3, #128	@ 0x80
 80018ac:	045b      	lsls	r3, r3, #17
 80018ae:	4013      	ands	r3, r2
 80018b0:	d109      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	2280      	movs	r2, #128	@ 0x80
 80018b6:	0452      	lsls	r2, r2, #17
 80018b8:	4313      	orrs	r3, r2
 80018ba:	4a32      	ldr	r2, [pc, #200]	@ (8001984 <HAL_ADC_ConfigChannel+0x360>)
 80018bc:	0019      	movs	r1, r3
 80018be:	0010      	movs	r0, r2
 80018c0:	f7ff fac2 	bl	8000e48 <LL_ADC_SetCommonPathInternalCh>
 80018c4:	e07a      	b.n	80019bc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a33      	ldr	r2, [pc, #204]	@ (8001998 <HAL_ADC_ConfigChannel+0x374>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d000      	beq.n	80018d2 <HAL_ADC_ConfigChannel+0x2ae>
 80018d0:	e074      	b.n	80019bc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	03db      	lsls	r3, r3, #15
 80018d8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80018da:	d000      	beq.n	80018de <HAL_ADC_ConfigChannel+0x2ba>
 80018dc:	e06e      	b.n	80019bc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	2280      	movs	r2, #128	@ 0x80
 80018e2:	03d2      	lsls	r2, r2, #15
 80018e4:	4313      	orrs	r3, r2
 80018e6:	4a27      	ldr	r2, [pc, #156]	@ (8001984 <HAL_ADC_ConfigChannel+0x360>)
 80018e8:	0019      	movs	r1, r3
 80018ea:	0010      	movs	r0, r2
 80018ec:	f7ff faac 	bl	8000e48 <LL_ADC_SetCommonPathInternalCh>
 80018f0:	e064      	b.n	80019bc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	2380      	movs	r3, #128	@ 0x80
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d004      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001902:	4a1f      	ldr	r2, [pc, #124]	@ (8001980 <HAL_ADC_ConfigChannel+0x35c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d107      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0019      	movs	r1, r3
 8001912:	0010      	movs	r0, r2
 8001914:	f7ff fb2f 	bl	8000f76 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	da4d      	bge.n	80019bc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <HAL_ADC_ConfigChannel+0x360>)
 8001922:	0018      	movs	r0, r3
 8001924:	f7ff faa4 	bl	8000e70 <LL_ADC_GetCommonPathInternalCh>
 8001928:	0003      	movs	r3, r0
 800192a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a15      	ldr	r2, [pc, #84]	@ (8001988 <HAL_ADC_ConfigChannel+0x364>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d108      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4a18      	ldr	r2, [pc, #96]	@ (800199c <HAL_ADC_ConfigChannel+0x378>)
 800193a:	4013      	ands	r3, r2
 800193c:	4a11      	ldr	r2, [pc, #68]	@ (8001984 <HAL_ADC_ConfigChannel+0x360>)
 800193e:	0019      	movs	r1, r3
 8001940:	0010      	movs	r0, r2
 8001942:	f7ff fa81 	bl	8000e48 <LL_ADC_SetCommonPathInternalCh>
 8001946:	e039      	b.n	80019bc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <HAL_ADC_ConfigChannel+0x370>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d108      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <HAL_ADC_ConfigChannel+0x37c>)
 8001956:	4013      	ands	r3, r2
 8001958:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <HAL_ADC_ConfigChannel+0x360>)
 800195a:	0019      	movs	r1, r3
 800195c:	0010      	movs	r0, r2
 800195e:	f7ff fa73 	bl	8000e48 <LL_ADC_SetCommonPathInternalCh>
 8001962:	e02b      	b.n	80019bc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0b      	ldr	r2, [pc, #44]	@ (8001998 <HAL_ADC_ConfigChannel+0x374>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d126      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <HAL_ADC_ConfigChannel+0x380>)
 8001972:	4013      	ands	r3, r2
 8001974:	4a03      	ldr	r2, [pc, #12]	@ (8001984 <HAL_ADC_ConfigChannel+0x360>)
 8001976:	0019      	movs	r1, r3
 8001978:	0010      	movs	r0, r2
 800197a:	f7ff fa65 	bl	8000e48 <LL_ADC_SetCommonPathInternalCh>
 800197e:	e01d      	b.n	80019bc <HAL_ADC_ConfigChannel+0x398>
 8001980:	80000004 	.word	0x80000004
 8001984:	40012708 	.word	0x40012708
 8001988:	b0001000 	.word	0xb0001000
 800198c:	20000000 	.word	0x20000000
 8001990:	00030d40 	.word	0x00030d40
 8001994:	b8004000 	.word	0xb8004000
 8001998:	b4002000 	.word	0xb4002000
 800199c:	ff7fffff 	.word	0xff7fffff
 80019a0:	feffffff 	.word	0xfeffffff
 80019a4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ac:	2220      	movs	r2, #32
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019b4:	2317      	movs	r3, #23
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2254      	movs	r2, #84	@ 0x54
 80019c0:	2100      	movs	r1, #0
 80019c2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80019c4:	2317      	movs	r3, #23
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	781b      	ldrb	r3, [r3, #0]
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b006      	add	sp, #24
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			@ (mov r8, r8)

080019d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7ff fb41 	bl	800106c <LL_ADC_IsEnabled>
 80019ea:	1e03      	subs	r3, r0, #0
 80019ec:	d000      	beq.n	80019f0 <ADC_Enable+0x1c>
 80019ee:	e069      	b.n	8001ac4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	4a36      	ldr	r2, [pc, #216]	@ (8001ad0 <ADC_Enable+0xfc>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	d00d      	beq.n	8001a18 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a00:	2210      	movs	r2, #16
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e056      	b.n	8001ac6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff fb01 	bl	8001024 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001a22:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad4 <ADC_Enable+0x100>)
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff fa23 	bl	8000e70 <LL_ADC_GetCommonPathInternalCh>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	4013      	ands	r3, r2
 8001a32:	d00f      	beq.n	8001a54 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a34:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <ADC_Enable+0x104>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4928      	ldr	r1, [pc, #160]	@ (8001adc <ADC_Enable+0x108>)
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7fe fb62 	bl	8000104 <__udivsi3>
 8001a40:	0003      	movs	r3, r0
 8001a42:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001a44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a46:	e002      	b.n	8001a4e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f9      	bne.n	8001a48 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7e5b      	ldrb	r3, [r3, #25]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d033      	beq.n	8001ac4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f9ea 	bl	8000e34 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a64:	e027      	b.n	8001ab6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff fafe 	bl	800106c <LL_ADC_IsEnabled>
 8001a70:	1e03      	subs	r3, r0, #0
 8001a72:	d104      	bne.n	8001a7e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff fad3 	bl	8001024 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a7e:	f7ff f9d9 	bl	8000e34 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d914      	bls.n	8001ab6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2201      	movs	r2, #1
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d00d      	beq.n	8001ab6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aaa:	2201      	movs	r2, #1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e007      	b.n	8001ac6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d1d0      	bne.n	8001a66 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b004      	add	sp, #16
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	80000017 	.word	0x80000017
 8001ad4:	40012708 	.word	0x40012708
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	00030d40 	.word	0x00030d40

08001ae0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7ff face 	bl	800108e <LL_ADC_IsDisableOngoing>
 8001af2:	0003      	movs	r3, r0
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff fab6 	bl	800106c <LL_ADC_IsEnabled>
 8001b00:	1e03      	subs	r3, r0, #0
 8001b02:	d046      	beq.n	8001b92 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d143      	bne.n	8001b92 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2205      	movs	r2, #5
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d10d      	bne.n	8001b34 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f7ff fa93 	bl	8001048 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2203      	movs	r2, #3
 8001b28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b2a:	f7ff f983 	bl	8000e34 <HAL_GetTick>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001b32:	e028      	b.n	8001b86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b38:	2210      	movs	r2, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b44:	2201      	movs	r2, #1
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e021      	b.n	8001b94 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b50:	f7ff f970 	bl	8000e34 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d913      	bls.n	8001b86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	d00d      	beq.n	8001b86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6e:	2210      	movs	r2, #16
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e006      	b.n	8001b94 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d1de      	bne.n	8001b50 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b004      	add	sp, #16
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <LL_ADC_GetCommonClock>:
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	23f0      	movs	r3, #240	@ 0xf0
 8001baa:	039b      	lsls	r3, r3, #14
 8001bac:	4013      	ands	r3, r2
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b002      	add	sp, #8
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <LL_ADC_GetClock>:
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	0f9b      	lsrs	r3, r3, #30
 8001bc4:	079b      	lsls	r3, r3, #30
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <LL_ADC_SetCalibrationFactor>:
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	22b4      	movs	r2, #180	@ 0xb4
 8001bdc:	589b      	ldr	r3, [r3, r2]
 8001bde:	227f      	movs	r2, #127	@ 0x7f
 8001be0:	4393      	bics	r3, r2
 8001be2:	001a      	movs	r2, r3
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	21b4      	movs	r1, #180	@ 0xb4
 8001bec:	505a      	str	r2, [r3, r1]
}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <LL_ADC_GetCalibrationFactor>:
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	22b4      	movs	r2, #180	@ 0xb4
 8001c02:	589b      	ldr	r3, [r3, r2]
 8001c04:	227f      	movs	r2, #127	@ 0x7f
 8001c06:	4013      	ands	r3, r2
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <LL_ADC_Enable>:
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <LL_ADC_Enable+0x20>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2201      	movs	r2, #1
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
}
 8001c28:	46c0      	nop			@ (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b002      	add	sp, #8
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	7fffffe8 	.word	0x7fffffe8

08001c34 <LL_ADC_Disable>:
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <LL_ADC_Disable+0x20>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	2202      	movs	r2, #2
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
}
 8001c4c:	46c0      	nop			@ (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	7fffffe8 	.word	0x7fffffe8

08001c58 <LL_ADC_IsEnabled>:
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2201      	movs	r2, #1
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <LL_ADC_IsEnabled+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_ADC_IsEnabled+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b002      	add	sp, #8
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <LL_ADC_StartCalibration>:
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4a05      	ldr	r2, [pc, #20]	@ (8001ca0 <LL_ADC_StartCalibration+0x24>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2280      	movs	r2, #128	@ 0x80
 8001c8e:	0612      	lsls	r2, r2, #24
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	609a      	str	r2, [r3, #8]
}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	7fffffe8 	.word	0x7fffffe8

08001ca4 <LL_ADC_IsCalibrationOnGoing>:
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	0fdb      	lsrs	r3, r3, #31
 8001cb2:	07da      	lsls	r2, r3, #31
 8001cb4:	2380      	movs	r3, #128	@ 0x80
 8001cb6:	061b      	lsls	r3, r3, #24
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d101      	bne.n	8001cc0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b002      	add	sp, #8
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b08b      	sub	sp, #44	@ 0x2c
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2254      	movs	r2, #84	@ 0x54
 8001ce0:	5c9b      	ldrb	r3, [r3, r2]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_ADCEx_Calibration_Start+0x1e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0dd      	b.n	8001ea6 <HAL_ADCEx_Calibration_Start+0x1da>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2254      	movs	r2, #84	@ 0x54
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001cf2:	231f      	movs	r3, #31
 8001cf4:	18fc      	adds	r4, r7, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f7ff fef1 	bl	8001ae0 <ADC_Disable>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7ff ffa6 	bl	8001c58 <LL_ADC_IsEnabled>
 8001d0c:	1e03      	subs	r3, r0, #0
 8001d0e:	d000      	beq.n	8001d12 <HAL_ADCEx_Calibration_Start+0x46>
 8001d10:	e0bc      	b.n	8001e8c <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d16:	4a66      	ldr	r2, [pc, #408]	@ (8001eb0 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4a62      	ldr	r2, [pc, #392]	@ (8001eb4 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	495f      	ldr	r1, [pc, #380]	@ (8001eb8 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d42:	e02d      	b.n	8001da0 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff ff97 	bl	8001c7c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001d4e:	e014      	b.n	8001d7a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	3301      	adds	r3, #1
 8001d54:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4a58      	ldr	r2, [pc, #352]	@ (8001ebc <HAL_ADCEx_Calibration_Start+0x1f0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d90d      	bls.n	8001d7a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	2212      	movs	r2, #18
 8001d64:	4393      	bics	r3, r2
 8001d66:	2210      	movs	r2, #16
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2254      	movs	r2, #84	@ 0x54
 8001d72:	2100      	movs	r1, #0
 8001d74:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e095      	b.n	8001ea6 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f7ff ff90 	bl	8001ca4 <LL_ADC_IsCalibrationOnGoing>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d1e3      	bne.n	8001d50 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff ff32 	bl	8001bf6 <LL_ADC_GetCalibrationFactor>
 8001d92:	0002      	movs	r2, r0
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	189b      	adds	r3, r3, r2
 8001d98:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	2b07      	cmp	r3, #7
 8001da4:	d9ce      	bls.n	8001d44 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001da6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001da8:	6a38      	ldr	r0, [r7, #32]
 8001daa:	f7fe f9ab 	bl	8000104 <__udivsi3>
 8001dae:	0003      	movs	r3, r0
 8001db0:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff ff2a 	bl	8001c10 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff fef8 	bl	8001bb6 <LL_ADC_GetClock>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d11b      	bne.n	8001e02 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dca:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec0 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff fee5 	bl	8001b9c <LL_ADC_GetCommonClock>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	23e0      	movs	r3, #224	@ 0xe0
 8001dda:	035b      	lsls	r3, r3, #13
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d310      	bcc.n	8001e02 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	0c9b      	lsrs	r3, r3, #18
 8001de4:	3b03      	subs	r3, #3
 8001de6:	2201      	movs	r2, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	0013      	movs	r3, r2
 8001dec:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	085b      	lsrs	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8001df4:	e002      	b.n	8001dfc <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f9      	bne.n	8001df6 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6a3a      	ldr	r2, [r7, #32]
 8001e08:	0011      	movs	r1, r2
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7ff fedf 	bl	8001bce <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff ff0d 	bl	8001c34 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e1a:	f7ff f80b 	bl	8000e34 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e22:	e01b      	b.n	8001e5c <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e24:	f7ff f806 	bl	8000e34 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d914      	bls.n	8001e5c <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0018      	movs	r0, r3
 8001e38:	f7ff ff0e 	bl	8001c58 <LL_ADC_IsEnabled>
 8001e3c:	1e03      	subs	r3, r0, #0
 8001e3e:	d00d      	beq.n	8001e5c <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e44:	2210      	movs	r2, #16
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e50:	2201      	movs	r2, #1
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e024      	b.n	8001ea6 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff fef9 	bl	8001c58 <LL_ADC_IsEnabled>
 8001e66:	1e03      	subs	r3, r0, #0
 8001e68:	d1dc      	bne.n	8001e24 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68d9      	ldr	r1, [r3, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7e:	2203      	movs	r2, #3
 8001e80:	4393      	bics	r3, r2
 8001e82:	2201      	movs	r2, #1
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e8a:	e005      	b.n	8001e98 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e90:	2210      	movs	r2, #16
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2254      	movs	r2, #84	@ 0x54
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001ea0:	231f      	movs	r3, #31
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	781b      	ldrb	r3, [r3, #0]
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b00b      	add	sp, #44	@ 0x2c
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	fffffefd 	.word	0xfffffefd
 8001eb4:	00008003 	.word	0x00008003
 8001eb8:	ffff7ffc 	.word	0xffff7ffc
 8001ebc:	0002f1ff 	.word	0x0002f1ff
 8001ec0:	40012708 	.word	0x40012708

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	0002      	movs	r2, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	1dfb      	adds	r3, r7, #7
 8001ed0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ed8:	d828      	bhi.n	8001f2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eda:	4a2f      	ldr	r2, [pc, #188]	@ (8001f98 <__NVIC_SetPriority+0xd4>)
 8001edc:	1dfb      	adds	r3, r7, #7
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b25b      	sxtb	r3, r3
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	33c0      	adds	r3, #192	@ 0xc0
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	589b      	ldr	r3, [r3, r2]
 8001eea:	1dfa      	adds	r2, r7, #7
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	0011      	movs	r1, r2
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	00d2      	lsls	r2, r2, #3
 8001ef6:	21ff      	movs	r1, #255	@ 0xff
 8001ef8:	4091      	lsls	r1, r2
 8001efa:	000a      	movs	r2, r1
 8001efc:	43d2      	mvns	r2, r2
 8001efe:	401a      	ands	r2, r3
 8001f00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	019b      	lsls	r3, r3, #6
 8001f06:	22ff      	movs	r2, #255	@ 0xff
 8001f08:	401a      	ands	r2, r3
 8001f0a:	1dfb      	adds	r3, r7, #7
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	2303      	movs	r3, #3
 8001f12:	4003      	ands	r3, r0
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f18:	481f      	ldr	r0, [pc, #124]	@ (8001f98 <__NVIC_SetPriority+0xd4>)
 8001f1a:	1dfb      	adds	r3, r7, #7
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b25b      	sxtb	r3, r3
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	430a      	orrs	r2, r1
 8001f24:	33c0      	adds	r3, #192	@ 0xc0
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f2a:	e031      	b.n	8001f90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f9c <__NVIC_SetPriority+0xd8>)
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	0019      	movs	r1, r3
 8001f34:	230f      	movs	r3, #15
 8001f36:	400b      	ands	r3, r1
 8001f38:	3b08      	subs	r3, #8
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3306      	adds	r3, #6
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	18d3      	adds	r3, r2, r3
 8001f42:	3304      	adds	r3, #4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	1dfa      	adds	r2, r7, #7
 8001f48:	7812      	ldrb	r2, [r2, #0]
 8001f4a:	0011      	movs	r1, r2
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	400a      	ands	r2, r1
 8001f50:	00d2      	lsls	r2, r2, #3
 8001f52:	21ff      	movs	r1, #255	@ 0xff
 8001f54:	4091      	lsls	r1, r2
 8001f56:	000a      	movs	r2, r1
 8001f58:	43d2      	mvns	r2, r2
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	019b      	lsls	r3, r3, #6
 8001f62:	22ff      	movs	r2, #255	@ 0xff
 8001f64:	401a      	ands	r2, r3
 8001f66:	1dfb      	adds	r3, r7, #7
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	4003      	ands	r3, r0
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f74:	4809      	ldr	r0, [pc, #36]	@ (8001f9c <__NVIC_SetPriority+0xd8>)
 8001f76:	1dfb      	adds	r3, r7, #7
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	001c      	movs	r4, r3
 8001f7c:	230f      	movs	r3, #15
 8001f7e:	4023      	ands	r3, r4
 8001f80:	3b08      	subs	r3, #8
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	430a      	orrs	r2, r1
 8001f86:	3306      	adds	r3, #6
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	18c3      	adds	r3, r0, r3
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	601a      	str	r2, [r3, #0]
}
 8001f90:	46c0      	nop			@ (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b003      	add	sp, #12
 8001f96:	bd90      	pop	{r4, r7, pc}
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	1e5a      	subs	r2, r3, #1
 8001fac:	2380      	movs	r3, #128	@ 0x80
 8001fae:	045b      	lsls	r3, r3, #17
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d301      	bcc.n	8001fb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e010      	b.n	8001fda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <SysTick_Config+0x44>)
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	3a01      	subs	r2, #1
 8001fbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	425b      	negs	r3, r3
 8001fc4:	2103      	movs	r1, #3
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7ff ff7c 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <SysTick_Config+0x44>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd2:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <SysTick_Config+0x44>)
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b002      	add	sp, #8
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	e000e010 	.word	0xe000e010

08001fe8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	1c02      	adds	r2, r0, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	187b      	adds	r3, r7, r1
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b25b      	sxtb	r3, r3
 8002002:	0011      	movs	r1, r2
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff ff5d 	bl	8001ec4 <__NVIC_SetPriority>
}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	b004      	add	sp, #16
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff ffbf 	bl	8001fa0 <SysTick_Config>
 8002022:	0003      	movs	r3, r0
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	e147      	b.n	80022cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2101      	movs	r1, #1
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4091      	lsls	r1, r2
 8002046:	000a      	movs	r2, r1
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d100      	bne.n	8002054 <HAL_GPIO_Init+0x28>
 8002052:	e138      	b.n	80022c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2203      	movs	r2, #3
 800205a:	4013      	ands	r3, r2
 800205c:	2b01      	cmp	r3, #1
 800205e:	d005      	beq.n	800206c <HAL_GPIO_Init+0x40>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2203      	movs	r2, #3
 8002066:	4013      	ands	r3, r2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d130      	bne.n	80020ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	409a      	lsls	r2, r3
 800207a:	0013      	movs	r3, r2
 800207c:	43da      	mvns	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	409a      	lsls	r2, r3
 800208e:	0013      	movs	r3, r2
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020a2:	2201      	movs	r2, #1
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	43da      	mvns	r2, r3
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	2201      	movs	r2, #1
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
 80020c0:	0013      	movs	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2203      	movs	r2, #3
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d017      	beq.n	800210a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	409a      	lsls	r2, r3
 80020e8:	0013      	movs	r3, r2
 80020ea:	43da      	mvns	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	409a      	lsls	r2, r3
 80020fc:	0013      	movs	r3, r2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2203      	movs	r2, #3
 8002110:	4013      	ands	r3, r2
 8002112:	2b02      	cmp	r3, #2
 8002114:	d123      	bne.n	800215e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	08da      	lsrs	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3208      	adds	r2, #8
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	58d3      	ldr	r3, [r2, r3]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2207      	movs	r2, #7
 8002128:	4013      	ands	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	409a      	lsls	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	43da      	mvns	r2, r3
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2107      	movs	r1, #7
 8002142:	400b      	ands	r3, r1
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	409a      	lsls	r2, r3
 8002148:	0013      	movs	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	08da      	lsrs	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3208      	adds	r2, #8
 8002158:	0092      	lsls	r2, r2, #2
 800215a:	6939      	ldr	r1, [r7, #16]
 800215c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	409a      	lsls	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	43da      	mvns	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2203      	movs	r2, #3
 800217c:	401a      	ands	r2, r3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	409a      	lsls	r2, r3
 8002184:	0013      	movs	r3, r2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	23c0      	movs	r3, #192	@ 0xc0
 8002198:	029b      	lsls	r3, r3, #10
 800219a:	4013      	ands	r3, r2
 800219c:	d100      	bne.n	80021a0 <HAL_GPIO_Init+0x174>
 800219e:	e092      	b.n	80022c6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80021a0:	4a50      	ldr	r2, [pc, #320]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3318      	adds	r3, #24
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	589b      	ldr	r3, [r3, r2]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2203      	movs	r2, #3
 80021b2:	4013      	ands	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	220f      	movs	r2, #15
 80021b8:	409a      	lsls	r2, r3
 80021ba:	0013      	movs	r3, r2
 80021bc:	43da      	mvns	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	23a0      	movs	r3, #160	@ 0xa0
 80021c8:	05db      	lsls	r3, r3, #23
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d013      	beq.n	80021f6 <HAL_GPIO_Init+0x1ca>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a45      	ldr	r2, [pc, #276]	@ (80022e8 <HAL_GPIO_Init+0x2bc>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00d      	beq.n	80021f2 <HAL_GPIO_Init+0x1c6>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a44      	ldr	r2, [pc, #272]	@ (80022ec <HAL_GPIO_Init+0x2c0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <HAL_GPIO_Init+0x1c2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a43      	ldr	r2, [pc, #268]	@ (80022f0 <HAL_GPIO_Init+0x2c4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_GPIO_Init+0x1be>
 80021e6:	2303      	movs	r3, #3
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x1cc>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e004      	b.n	80021f8 <HAL_GPIO_Init+0x1cc>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_Init+0x1cc>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_GPIO_Init+0x1cc>
 80021f6:	2300      	movs	r3, #0
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	2103      	movs	r1, #3
 80021fc:	400a      	ands	r2, r1
 80021fe:	00d2      	lsls	r2, r2, #3
 8002200:	4093      	lsls	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002208:	4936      	ldr	r1, [pc, #216]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3318      	adds	r3, #24
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002216:	4b33      	ldr	r3, [pc, #204]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	43da      	mvns	r2, r3
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	2380      	movs	r3, #128	@ 0x80
 800222c:	035b      	lsls	r3, r3, #13
 800222e:	4013      	ands	r3, r2
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800223a:	4b2a      	ldr	r3, [pc, #168]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002240:	4b28      	ldr	r3, [pc, #160]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	43da      	mvns	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	039b      	lsls	r3, r3, #14
 8002258:	4013      	ands	r3, r2
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002264:	4b1f      	ldr	r3, [pc, #124]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800226a:	4a1e      	ldr	r2, [pc, #120]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 800226c:	2384      	movs	r3, #132	@ 0x84
 800226e:	58d3      	ldr	r3, [r2, r3]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43da      	mvns	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	029b      	lsls	r3, r3, #10
 8002284:	4013      	ands	r3, r2
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002290:	4914      	ldr	r1, [pc, #80]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 8002292:	2284      	movs	r2, #132	@ 0x84
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002298:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	58d3      	ldr	r3, [r2, r3]
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	43da      	mvns	r2, r3
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	2380      	movs	r3, #128	@ 0x80
 80022b0:	025b      	lsls	r3, r3, #9
 80022b2:	4013      	ands	r3, r2
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022be:	4909      	ldr	r1, [pc, #36]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 80022c0:	2280      	movs	r2, #128	@ 0x80
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	40da      	lsrs	r2, r3
 80022d4:	1e13      	subs	r3, r2, #0
 80022d6:	d000      	beq.n	80022da <HAL_GPIO_Init+0x2ae>
 80022d8:	e6b0      	b.n	800203c <HAL_GPIO_Init+0x10>
  }
}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	46c0      	nop			@ (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b006      	add	sp, #24
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021800 	.word	0x40021800
 80022e8:	50000400 	.word	0x50000400
 80022ec:	50000800 	.word	0x50000800
 80022f0:	50000c00 	.word	0x50000c00

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	0008      	movs	r0, r1
 80022fe:	0011      	movs	r1, r2
 8002300:	1cbb      	adds	r3, r7, #2
 8002302:	1c02      	adds	r2, r0, #0
 8002304:	801a      	strh	r2, [r3, #0]
 8002306:	1c7b      	adds	r3, r7, #1
 8002308:	1c0a      	adds	r2, r1, #0
 800230a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800230c:	1c7b      	adds	r3, r7, #1
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002314:	1cbb      	adds	r3, r7, #2
 8002316:	881a      	ldrh	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800231c:	e003      	b.n	8002326 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800231e:	1cbb      	adds	r3, r7, #2
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002326:	46c0      	nop			@ (mov r8, r8)
 8002328:	46bd      	mov	sp, r7
 800232a:	b002      	add	sp, #8
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002338:	4b19      	ldr	r3, [pc, #100]	@ (80023a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a19      	ldr	r2, [pc, #100]	@ (80023a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	429a      	cmp	r2, r3
 8002352:	d11f      	bne.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002354:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	0013      	movs	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	189b      	adds	r3, r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4912      	ldr	r1, [pc, #72]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002362:	0018      	movs	r0, r3
 8002364:	f7fd fece 	bl	8000104 <__udivsi3>
 8002368:	0003      	movs	r3, r0
 800236a:	3301      	adds	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800236e:	e008      	b.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3b01      	subs	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	e001      	b.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e009      	b.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002382:	4b07      	ldr	r3, [pc, #28]	@ (80023a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	401a      	ands	r2, r3
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	429a      	cmp	r2, r3
 8002392:	d0ed      	beq.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b004      	add	sp, #16
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	40007000 	.word	0x40007000
 80023a4:	fffff9ff 	.word	0xfffff9ff
 80023a8:	20000000 	.word	0x20000000
 80023ac:	000f4240 	.word	0x000f4240

080023b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	23e0      	movs	r3, #224	@ 0xe0
 80023ba:	01db      	lsls	r3, r3, #7
 80023bc:	4013      	ands	r3, r2
}
 80023be:	0018      	movs	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e2fe      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2201      	movs	r2, #1
 80023e0:	4013      	ands	r3, r2
 80023e2:	d100      	bne.n	80023e6 <HAL_RCC_OscConfig+0x1e>
 80023e4:	e07c      	b.n	80024e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e6:	4bc3      	ldr	r3, [pc, #780]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2238      	movs	r2, #56	@ 0x38
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f0:	4bc0      	ldr	r3, [pc, #768]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2203      	movs	r2, #3
 80023f6:	4013      	ands	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d102      	bne.n	8002406 <HAL_RCC_OscConfig+0x3e>
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b03      	cmp	r3, #3
 8002404:	d002      	beq.n	800240c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b08      	cmp	r3, #8
 800240a:	d10b      	bne.n	8002424 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240c:	4bb9      	ldr	r3, [pc, #740]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2380      	movs	r3, #128	@ 0x80
 8002412:	029b      	lsls	r3, r3, #10
 8002414:	4013      	ands	r3, r2
 8002416:	d062      	beq.n	80024de <HAL_RCC_OscConfig+0x116>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d15e      	bne.n	80024de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e2d9      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	025b      	lsls	r3, r3, #9
 800242c:	429a      	cmp	r2, r3
 800242e:	d107      	bne.n	8002440 <HAL_RCC_OscConfig+0x78>
 8002430:	4bb0      	ldr	r3, [pc, #704]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4baf      	ldr	r3, [pc, #700]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002436:	2180      	movs	r1, #128	@ 0x80
 8002438:	0249      	lsls	r1, r1, #9
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e020      	b.n	8002482 <HAL_RCC_OscConfig+0xba>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	23a0      	movs	r3, #160	@ 0xa0
 8002446:	02db      	lsls	r3, r3, #11
 8002448:	429a      	cmp	r2, r3
 800244a:	d10e      	bne.n	800246a <HAL_RCC_OscConfig+0xa2>
 800244c:	4ba9      	ldr	r3, [pc, #676]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4ba8      	ldr	r3, [pc, #672]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002452:	2180      	movs	r1, #128	@ 0x80
 8002454:	02c9      	lsls	r1, r1, #11
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	4ba6      	ldr	r3, [pc, #664]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4ba5      	ldr	r3, [pc, #660]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002460:	2180      	movs	r1, #128	@ 0x80
 8002462:	0249      	lsls	r1, r1, #9
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e00b      	b.n	8002482 <HAL_RCC_OscConfig+0xba>
 800246a:	4ba2      	ldr	r3, [pc, #648]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4ba1      	ldr	r3, [pc, #644]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002470:	49a1      	ldr	r1, [pc, #644]	@ (80026f8 <HAL_RCC_OscConfig+0x330>)
 8002472:	400a      	ands	r2, r1
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4b9f      	ldr	r3, [pc, #636]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b9e      	ldr	r3, [pc, #632]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800247c:	499f      	ldr	r1, [pc, #636]	@ (80026fc <HAL_RCC_OscConfig+0x334>)
 800247e:	400a      	ands	r2, r1
 8002480:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d014      	beq.n	80024b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe fcd3 	bl	8000e34 <HAL_GetTick>
 800248e:	0003      	movs	r3, r0
 8002490:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002494:	f7fe fcce 	bl	8000e34 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	@ 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e298      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a6:	4b93      	ldr	r3, [pc, #588]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	2380      	movs	r3, #128	@ 0x80
 80024ac:	029b      	lsls	r3, r3, #10
 80024ae:	4013      	ands	r3, r2
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0xcc>
 80024b2:	e015      	b.n	80024e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fcbe 	bl	8000e34 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024be:	f7fe fcb9 	bl	8000e34 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b64      	cmp	r3, #100	@ 0x64
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e283      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d0:	4b88      	ldr	r3, [pc, #544]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	029b      	lsls	r3, r3, #10
 80024d8:	4013      	ands	r3, r2
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0xf6>
 80024dc:	e000      	b.n	80024e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d100      	bne.n	80024ec <HAL_RCC_OscConfig+0x124>
 80024ea:	e099      	b.n	8002620 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ec:	4b81      	ldr	r3, [pc, #516]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2238      	movs	r2, #56	@ 0x38
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f6:	4b7f      	ldr	r3, [pc, #508]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2203      	movs	r2, #3
 80024fc:	4013      	ands	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d102      	bne.n	800250c <HAL_RCC_OscConfig+0x144>
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d002      	beq.n	8002512 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d135      	bne.n	800257e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002512:	4b78      	ldr	r3, [pc, #480]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4013      	ands	r3, r2
 800251c:	d005      	beq.n	800252a <HAL_RCC_OscConfig+0x162>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e256      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252a:	4b72      	ldr	r3, [pc, #456]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a74      	ldr	r2, [pc, #464]	@ (8002700 <HAL_RCC_OscConfig+0x338>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	021a      	lsls	r2, r3, #8
 800253a:	4b6e      	ldr	r3, [pc, #440]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800253c:	430a      	orrs	r2, r1
 800253e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d112      	bne.n	800256c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002546:	4b6b      	ldr	r3, [pc, #428]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6e      	ldr	r2, [pc, #440]	@ (8002704 <HAL_RCC_OscConfig+0x33c>)
 800254c:	4013      	ands	r3, r2
 800254e:	0019      	movs	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	4b67      	ldr	r3, [pc, #412]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800255a:	4b66      	ldr	r3, [pc, #408]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	0adb      	lsrs	r3, r3, #11
 8002560:	2207      	movs	r2, #7
 8002562:	4013      	ands	r3, r2
 8002564:	4a68      	ldr	r2, [pc, #416]	@ (8002708 <HAL_RCC_OscConfig+0x340>)
 8002566:	40da      	lsrs	r2, r3
 8002568:	4b68      	ldr	r3, [pc, #416]	@ (800270c <HAL_RCC_OscConfig+0x344>)
 800256a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800256c:	4b68      	ldr	r3, [pc, #416]	@ (8002710 <HAL_RCC_OscConfig+0x348>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0018      	movs	r0, r3
 8002572:	f7fe fc03 	bl	8000d7c <HAL_InitTick>
 8002576:	1e03      	subs	r3, r0, #0
 8002578:	d051      	beq.n	800261e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e22c      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d030      	beq.n	80025e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002586:	4b5b      	ldr	r3, [pc, #364]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5e      	ldr	r2, [pc, #376]	@ (8002704 <HAL_RCC_OscConfig+0x33c>)
 800258c:	4013      	ands	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	4b57      	ldr	r3, [pc, #348]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002596:	430a      	orrs	r2, r1
 8002598:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800259a:	4b56      	ldr	r3, [pc, #344]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b55      	ldr	r3, [pc, #340]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80025a0:	2180      	movs	r1, #128	@ 0x80
 80025a2:	0049      	lsls	r1, r1, #1
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe fc44 	bl	8000e34 <HAL_GetTick>
 80025ac:	0003      	movs	r3, r0
 80025ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7fe fc3f 	bl	8000e34 <HAL_GetTick>
 80025b6:	0002      	movs	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e209      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c4:	4b4b      	ldr	r3, [pc, #300]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	@ 0x80
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4013      	ands	r3, r2
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b48      	ldr	r3, [pc, #288]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002700 <HAL_RCC_OscConfig+0x338>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	021a      	lsls	r2, r3, #8
 80025e0:	4b44      	ldr	r3, [pc, #272]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	e01b      	b.n	8002620 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80025e8:	4b42      	ldr	r3, [pc, #264]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b41      	ldr	r3, [pc, #260]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80025ee:	4949      	ldr	r1, [pc, #292]	@ (8002714 <HAL_RCC_OscConfig+0x34c>)
 80025f0:	400a      	ands	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fc1e 	bl	8000e34 <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fe:	f7fe fc19 	bl	8000e34 <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1e3      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002610:	4b38      	ldr	r3, [pc, #224]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4013      	ands	r3, r2
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x236>
 800261c:	e000      	b.n	8002620 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800261e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2208      	movs	r2, #8
 8002626:	4013      	ands	r3, r2
 8002628:	d047      	beq.n	80026ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800262a:	4b32      	ldr	r3, [pc, #200]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2238      	movs	r2, #56	@ 0x38
 8002630:	4013      	ands	r3, r2
 8002632:	2b18      	cmp	r3, #24
 8002634:	d10a      	bne.n	800264c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002636:	4b2f      	ldr	r3, [pc, #188]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263a:	2202      	movs	r2, #2
 800263c:	4013      	ands	r3, r2
 800263e:	d03c      	beq.n	80026ba <HAL_RCC_OscConfig+0x2f2>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d138      	bne.n	80026ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e1c5      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d019      	beq.n	8002688 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002654:	4b27      	ldr	r3, [pc, #156]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 8002656:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002658:	4b26      	ldr	r3, [pc, #152]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800265a:	2101      	movs	r1, #1
 800265c:	430a      	orrs	r2, r1
 800265e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fbe8 	bl	8000e34 <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266a:	f7fe fbe3 	bl	8000e34 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1ad      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267c:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800267e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d0f1      	beq.n	800266a <HAL_RCC_OscConfig+0x2a2>
 8002686:	e018      	b.n	80026ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002688:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800268a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800268c:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 800268e:	2101      	movs	r1, #1
 8002690:	438a      	bics	r2, r1
 8002692:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fbce 	bl	8000e34 <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269e:	f7fe fbc9 	bl	8000e34 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e193      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b0:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80026b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b4:	2202      	movs	r2, #2
 80026b6:	4013      	ands	r3, r2
 80026b8:	d1f1      	bne.n	800269e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2204      	movs	r2, #4
 80026c0:	4013      	ands	r3, r2
 80026c2:	d100      	bne.n	80026c6 <HAL_RCC_OscConfig+0x2fe>
 80026c4:	e0c6      	b.n	8002854 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c6:	231f      	movs	r3, #31
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026ce:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2238      	movs	r2, #56	@ 0x38
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d11e      	bne.n	8002718 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80026da:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_RCC_OscConfig+0x32c>)
 80026dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d100      	bne.n	80026e6 <HAL_RCC_OscConfig+0x31e>
 80026e4:	e0b6      	b.n	8002854 <HAL_RCC_OscConfig+0x48c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d000      	beq.n	80026f0 <HAL_RCC_OscConfig+0x328>
 80026ee:	e0b1      	b.n	8002854 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e171      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
 80026f4:	40021000 	.word	0x40021000
 80026f8:	fffeffff 	.word	0xfffeffff
 80026fc:	fffbffff 	.word	0xfffbffff
 8002700:	ffff80ff 	.word	0xffff80ff
 8002704:	ffffc7ff 	.word	0xffffc7ff
 8002708:	00f42400 	.word	0x00f42400
 800270c:	20000000 	.word	0x20000000
 8002710:	20000004 	.word	0x20000004
 8002714:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002718:	4bb1      	ldr	r3, [pc, #708]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 800271a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800271c:	2380      	movs	r3, #128	@ 0x80
 800271e:	055b      	lsls	r3, r3, #21
 8002720:	4013      	ands	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_RCC_OscConfig+0x360>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x362>
 8002728:	2300      	movs	r3, #0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d011      	beq.n	8002752 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	4bac      	ldr	r3, [pc, #688]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002732:	4bab      	ldr	r3, [pc, #684]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002734:	2180      	movs	r1, #128	@ 0x80
 8002736:	0549      	lsls	r1, r1, #21
 8002738:	430a      	orrs	r2, r1
 800273a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800273c:	4ba8      	ldr	r3, [pc, #672]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 800273e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002740:	2380      	movs	r3, #128	@ 0x80
 8002742:	055b      	lsls	r3, r3, #21
 8002744:	4013      	ands	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800274a:	231f      	movs	r3, #31
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002752:	4ba4      	ldr	r3, [pc, #656]	@ (80029e4 <HAL_RCC_OscConfig+0x61c>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	@ 0x80
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4013      	ands	r3, r2
 800275c:	d11a      	bne.n	8002794 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800275e:	4ba1      	ldr	r3, [pc, #644]	@ (80029e4 <HAL_RCC_OscConfig+0x61c>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4ba0      	ldr	r3, [pc, #640]	@ (80029e4 <HAL_RCC_OscConfig+0x61c>)
 8002764:	2180      	movs	r1, #128	@ 0x80
 8002766:	0049      	lsls	r1, r1, #1
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800276c:	f7fe fb62 	bl	8000e34 <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7fe fb5d 	bl	8000e34 <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e127      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002788:	4b96      	ldr	r3, [pc, #600]	@ (80029e4 <HAL_RCC_OscConfig+0x61c>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	@ 0x80
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4013      	ands	r3, r2
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x3e2>
 800279c:	4b90      	ldr	r3, [pc, #576]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 800279e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027a0:	4b8f      	ldr	r3, [pc, #572]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027a2:	2101      	movs	r1, #1
 80027a4:	430a      	orrs	r2, r1
 80027a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027a8:	e01c      	b.n	80027e4 <HAL_RCC_OscConfig+0x41c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x404>
 80027b2:	4b8b      	ldr	r3, [pc, #556]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027b6:	4b8a      	ldr	r3, [pc, #552]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027b8:	2104      	movs	r1, #4
 80027ba:	430a      	orrs	r2, r1
 80027bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027be:	4b88      	ldr	r3, [pc, #544]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027c2:	4b87      	ldr	r3, [pc, #540]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0x41c>
 80027cc:	4b84      	ldr	r3, [pc, #528]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027d0:	4b83      	ldr	r3, [pc, #524]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027d2:	2101      	movs	r1, #1
 80027d4:	438a      	bics	r2, r1
 80027d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027d8:	4b81      	ldr	r3, [pc, #516]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027dc:	4b80      	ldr	r3, [pc, #512]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80027de:	2104      	movs	r1, #4
 80027e0:	438a      	bics	r2, r1
 80027e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d014      	beq.n	8002816 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe fb22 	bl	8000e34 <HAL_GetTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f4:	e009      	b.n	800280a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe fb1d 	bl	8000e34 <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	4a79      	ldr	r2, [pc, #484]	@ (80029e8 <HAL_RCC_OscConfig+0x620>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e0e6      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280a:	4b75      	ldr	r3, [pc, #468]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 800280c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280e:	2202      	movs	r2, #2
 8002810:	4013      	ands	r3, r2
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x42e>
 8002814:	e013      	b.n	800283e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe fb0d 	bl	8000e34 <HAL_GetTick>
 800281a:	0003      	movs	r3, r0
 800281c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800281e:	e009      	b.n	8002834 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7fe fb08 	bl	8000e34 <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	4a6f      	ldr	r2, [pc, #444]	@ (80029e8 <HAL_RCC_OscConfig+0x620>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0d1      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002834:	4b6a      	ldr	r3, [pc, #424]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800283e:	231f      	movs	r3, #31
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d105      	bne.n	8002854 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002848:	4b65      	ldr	r3, [pc, #404]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 800284a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800284c:	4b64      	ldr	r3, [pc, #400]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 800284e:	4967      	ldr	r1, [pc, #412]	@ (80029ec <HAL_RCC_OscConfig+0x624>)
 8002850:	400a      	ands	r2, r1
 8002852:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d100      	bne.n	800285e <HAL_RCC_OscConfig+0x496>
 800285c:	e0bb      	b.n	80029d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800285e:	4b60      	ldr	r3, [pc, #384]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2238      	movs	r2, #56	@ 0x38
 8002864:	4013      	ands	r3, r2
 8002866:	2b10      	cmp	r3, #16
 8002868:	d100      	bne.n	800286c <HAL_RCC_OscConfig+0x4a4>
 800286a:	e07b      	b.n	8002964 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d156      	bne.n	8002922 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002874:	4b5a      	ldr	r3, [pc, #360]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b59      	ldr	r3, [pc, #356]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 800287a:	495d      	ldr	r1, [pc, #372]	@ (80029f0 <HAL_RCC_OscConfig+0x628>)
 800287c:	400a      	ands	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe fad8 	bl	8000e34 <HAL_GetTick>
 8002884:	0003      	movs	r3, r0
 8002886:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe fad3 	bl	8000e34 <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e09d      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289c:	4b50      	ldr	r3, [pc, #320]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2380      	movs	r3, #128	@ 0x80
 80028a2:	049b      	lsls	r3, r3, #18
 80028a4:	4013      	ands	r3, r2
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a8:	4b4d      	ldr	r3, [pc, #308]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a51      	ldr	r2, [pc, #324]	@ (80029f4 <HAL_RCC_OscConfig+0x62c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d4:	431a      	orrs	r2, r3
 80028d6:	4b42      	ldr	r3, [pc, #264]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80028d8:	430a      	orrs	r2, r1
 80028da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028dc:	4b40      	ldr	r3, [pc, #256]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b3f      	ldr	r3, [pc, #252]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80028e2:	2180      	movs	r1, #128	@ 0x80
 80028e4:	0449      	lsls	r1, r1, #17
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80028ea:	4b3d      	ldr	r3, [pc, #244]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	4b3c      	ldr	r3, [pc, #240]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 80028f0:	2180      	movs	r1, #128	@ 0x80
 80028f2:	0549      	lsls	r1, r1, #21
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fa9c 	bl	8000e34 <HAL_GetTick>
 80028fc:	0003      	movs	r3, r0
 80028fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7fe fa97 	bl	8000e34 <HAL_GetTick>
 8002906:	0002      	movs	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e061      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002914:	4b32      	ldr	r3, [pc, #200]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	049b      	lsls	r3, r3, #18
 800291c:	4013      	ands	r3, r2
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x53a>
 8002920:	e059      	b.n	80029d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b2f      	ldr	r3, [pc, #188]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b2e      	ldr	r3, [pc, #184]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002928:	4931      	ldr	r1, [pc, #196]	@ (80029f0 <HAL_RCC_OscConfig+0x628>)
 800292a:	400a      	ands	r2, r1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fa81 	bl	8000e34 <HAL_GetTick>
 8002932:	0003      	movs	r3, r0
 8002934:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe fa7c 	bl	8000e34 <HAL_GetTick>
 800293c:	0002      	movs	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e046      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294a:	4b25      	ldr	r3, [pc, #148]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	2380      	movs	r3, #128	@ 0x80
 8002950:	049b      	lsls	r3, r3, #18
 8002952:	4013      	ands	r3, r2
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002956:	4b22      	ldr	r3, [pc, #136]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	4b21      	ldr	r3, [pc, #132]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 800295c:	4926      	ldr	r1, [pc, #152]	@ (80029f8 <HAL_RCC_OscConfig+0x630>)
 800295e:	400a      	ands	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	e038      	b.n	80029d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e033      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <HAL_RCC_OscConfig+0x618>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2203      	movs	r2, #3
 800297a:	401a      	ands	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	429a      	cmp	r2, r3
 8002982:	d126      	bne.n	80029d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2270      	movs	r2, #112	@ 0x70
 8002988:	401a      	ands	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d11f      	bne.n	80029d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	23fe      	movs	r3, #254	@ 0xfe
 8002996:	01db      	lsls	r3, r3, #7
 8002998:	401a      	ands	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d116      	bne.n	80029d2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	23f8      	movs	r3, #248	@ 0xf8
 80029a8:	039b      	lsls	r3, r3, #14
 80029aa:	401a      	ands	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d10e      	bne.n	80029d2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	23e0      	movs	r3, #224	@ 0xe0
 80029b8:	051b      	lsls	r3, r3, #20
 80029ba:	401a      	ands	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	0f5b      	lsrs	r3, r3, #29
 80029c8:	075a      	lsls	r2, r3, #29
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b008      	add	sp, #32
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	00001388 	.word	0x00001388
 80029ec:	efffffff 	.word	0xefffffff
 80029f0:	feffffff 	.word	0xfeffffff
 80029f4:	11c1808c 	.word	0x11c1808c
 80029f8:	eefefffc 	.word	0xeefefffc

080029fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0e9      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b76      	ldr	r3, [pc, #472]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2207      	movs	r2, #7
 8002a16:	4013      	ands	r3, r2
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d91e      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b73      	ldr	r3, [pc, #460]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2207      	movs	r2, #7
 8002a24:	4393      	bics	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	4b70      	ldr	r3, [pc, #448]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a30:	f7fe fa00 	bl	8000e34 <HAL_GetTick>
 8002a34:	0003      	movs	r3, r0
 8002a36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a38:	e009      	b.n	8002a4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3a:	f7fe f9fb 	bl	8000e34 <HAL_GetTick>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	4a6a      	ldr	r2, [pc, #424]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e0ca      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a4e:	4b67      	ldr	r3, [pc, #412]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2207      	movs	r2, #7
 8002a54:	4013      	ands	r3, r2
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1ee      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2202      	movs	r2, #2
 8002a62:	4013      	ands	r3, r2
 8002a64:	d015      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d006      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a70:	4b60      	ldr	r3, [pc, #384]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a76:	21e0      	movs	r1, #224	@ 0xe0
 8002a78:	01c9      	lsls	r1, r1, #7
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4a5d      	ldr	r2, [pc, #372]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1fc>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	0019      	movs	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	4b59      	ldr	r3, [pc, #356]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d057      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa4:	4b53      	ldr	r3, [pc, #332]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	029b      	lsls	r3, r3, #10
 8002aac:	4013      	ands	r3, r2
 8002aae:	d12b      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e097      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abc:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	049b      	lsls	r3, r3, #18
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d11f      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e08b      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad4:	4b47      	ldr	r3, [pc, #284]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4013      	ands	r3, r2
 8002ade:	d113      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e07f      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aec:	4b41      	ldr	r3, [pc, #260]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af0:	2202      	movs	r2, #2
 8002af2:	4013      	ands	r3, r2
 8002af4:	d108      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e074      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afa:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	2202      	movs	r2, #2
 8002b00:	4013      	ands	r3, r2
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e06d      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b08:	4b3a      	ldr	r3, [pc, #232]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	4393      	bics	r3, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4b37      	ldr	r3, [pc, #220]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1c:	f7fe f98a 	bl	8000e34 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b24:	e009      	b.n	8002b3a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b26:	f7fe f985 	bl	8000e34 <HAL_GetTick>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	4a2f      	ldr	r2, [pc, #188]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e054      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2238      	movs	r2, #56	@ 0x38
 8002b40:	401a      	ands	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1ec      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b27      	ldr	r3, [pc, #156]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2207      	movs	r2, #7
 8002b52:	4013      	ands	r3, r2
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d21e      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b24      	ldr	r3, [pc, #144]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2207      	movs	r2, #7
 8002b60:	4393      	bics	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	4b21      	ldr	r3, [pc, #132]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe f962 	bl	8000e34 <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b74:	e009      	b.n	8002b8a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b76:	f7fe f95d 	bl	8000e34 <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e02c      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b8a:	4b18      	ldr	r3, [pc, #96]	@ (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2207      	movs	r2, #7
 8002b90:	4013      	ands	r3, r2
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1ee      	bne.n	8002b76 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba2:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4a15      	ldr	r2, [pc, #84]	@ (8002bfc <HAL_RCC_ClockConfig+0x200>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	0019      	movs	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002bb6:	f000 f829 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8002bba:	0001      	movs	r1, r0
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	0a1b      	lsrs	r3, r3, #8
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c00 <HAL_RCC_ClockConfig+0x204>)
 8002bc8:	0092      	lsls	r2, r2, #2
 8002bca:	58d3      	ldr	r3, [r2, r3]
 8002bcc:	221f      	movs	r2, #31
 8002bce:	4013      	ands	r3, r2
 8002bd0:	000a      	movs	r2, r1
 8002bd2:	40da      	lsrs	r2, r3
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <HAL_RCC_ClockConfig+0x208>)
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <HAL_RCC_ClockConfig+0x20c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7fe f8cd 	bl	8000d7c <HAL_InitTick>
 8002be2:	0003      	movs	r3, r0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b004      	add	sp, #16
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	00001388 	.word	0x00001388
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	fffff0ff 	.word	0xfffff0ff
 8002bfc:	ffff8fff 	.word	0xffff8fff
 8002c00:	08004de4 	.word	0x08004de4
 8002c04:	20000000 	.word	0x20000000
 8002c08:	20000004 	.word	0x20000004

08002c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c12:	4b3c      	ldr	r3, [pc, #240]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2238      	movs	r2, #56	@ 0x38
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d10f      	bne.n	8002c3c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c1c:	4b39      	ldr	r3, [pc, #228]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0adb      	lsrs	r3, r3, #11
 8002c22:	2207      	movs	r2, #7
 8002c24:	4013      	ands	r3, r2
 8002c26:	2201      	movs	r2, #1
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	0013      	movs	r3, r2
 8002c2c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c2e:	6839      	ldr	r1, [r7, #0]
 8002c30:	4835      	ldr	r0, [pc, #212]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c32:	f7fd fa67 	bl	8000104 <__udivsi3>
 8002c36:	0003      	movs	r3, r0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	e05d      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c3c:	4b31      	ldr	r3, [pc, #196]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2238      	movs	r2, #56	@ 0x38
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d102      	bne.n	8002c4e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c48:	4b30      	ldr	r3, [pc, #192]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x100>)
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	e054      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2238      	movs	r2, #56	@ 0x38
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d138      	bne.n	8002ccc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2203      	movs	r2, #3
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c64:	4b27      	ldr	r3, [pc, #156]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	3301      	adds	r3, #1
 8002c70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d10d      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	4824      	ldr	r0, [pc, #144]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x100>)
 8002c7c:	f7fd fa42 	bl	8000104 <__udivsi3>
 8002c80:	0003      	movs	r3, r0
 8002c82:	0019      	movs	r1, r3
 8002c84:	4b1f      	ldr	r3, [pc, #124]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	227f      	movs	r2, #127	@ 0x7f
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	434b      	muls	r3, r1
 8002c90:	617b      	str	r3, [r7, #20]
        break;
 8002c92:	e00d      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	481c      	ldr	r0, [pc, #112]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c98:	f7fd fa34 	bl	8000104 <__udivsi3>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	227f      	movs	r2, #127	@ 0x7f
 8002ca8:	4013      	ands	r3, r2
 8002caa:	434b      	muls	r3, r1
 8002cac:	617b      	str	r3, [r7, #20]
        break;
 8002cae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002cb0:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0f5b      	lsrs	r3, r3, #29
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	4013      	ands	r3, r2
 8002cba:	3301      	adds	r3, #1
 8002cbc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	6978      	ldr	r0, [r7, #20]
 8002cc2:	f7fd fa1f 	bl	8000104 <__udivsi3>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	e015      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2238      	movs	r2, #56	@ 0x38
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d103      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002cd8:	2380      	movs	r3, #128	@ 0x80
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ce0:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2238      	movs	r2, #56	@ 0x38
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b18      	cmp	r3, #24
 8002cea:	d103      	bne.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002cec:	23fa      	movs	r3, #250	@ 0xfa
 8002cee:	01db      	lsls	r3, r3, #7
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	e001      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cf8:	693b      	ldr	r3, [r7, #16]
}
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b006      	add	sp, #24
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			@ (mov r8, r8)
 8002d04:	40021000 	.word	0x40021000
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	007a1200 	.word	0x007a1200

08002d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d14:	4b02      	ldr	r3, [pc, #8]	@ (8002d20 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	20000000 	.word	0x20000000

08002d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d24:	b5b0      	push	{r4, r5, r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d28:	f7ff fff2 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d2c:	0004      	movs	r4, r0
 8002d2e:	f7ff fb3f 	bl	80023b0 <LL_RCC_GetAPB1Prescaler>
 8002d32:	0003      	movs	r3, r0
 8002d34:	0b1a      	lsrs	r2, r3, #12
 8002d36:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d38:	0092      	lsls	r2, r2, #2
 8002d3a:	58d3      	ldr	r3, [r2, r3]
 8002d3c:	221f      	movs	r2, #31
 8002d3e:	4013      	ands	r3, r2
 8002d40:	40dc      	lsrs	r4, r3
 8002d42:	0023      	movs	r3, r4
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	08004e24 	.word	0x08004e24

08002d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d58:	2313      	movs	r3, #19
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d60:	2312      	movs	r3, #18
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2380      	movs	r3, #128	@ 0x80
 8002d6e:	029b      	lsls	r3, r3, #10
 8002d70:	4013      	ands	r3, r2
 8002d72:	d100      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002d74:	e0a3      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d76:	2011      	movs	r0, #17
 8002d78:	183b      	adds	r3, r7, r0
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7e:	4bc3      	ldr	r3, [pc, #780]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	055b      	lsls	r3, r3, #21
 8002d86:	4013      	ands	r3, r2
 8002d88:	d110      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	4bc0      	ldr	r3, [pc, #768]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d8e:	4bbf      	ldr	r3, [pc, #764]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d90:	2180      	movs	r1, #128	@ 0x80
 8002d92:	0549      	lsls	r1, r1, #21
 8002d94:	430a      	orrs	r2, r1
 8002d96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d98:	4bbc      	ldr	r3, [pc, #752]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	055b      	lsls	r3, r3, #21
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da6:	183b      	adds	r3, r7, r0
 8002da8:	2201      	movs	r2, #1
 8002daa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dac:	4bb8      	ldr	r3, [pc, #736]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4bb7      	ldr	r3, [pc, #732]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002db2:	2180      	movs	r1, #128	@ 0x80
 8002db4:	0049      	lsls	r1, r1, #1
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dba:	f7fe f83b 	bl	8000e34 <HAL_GetTick>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc4:	f7fe f836 	bl	8000e34 <HAL_GetTick>
 8002dc8:	0002      	movs	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d904      	bls.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002dd2:	2313      	movs	r3, #19
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	701a      	strb	r2, [r3, #0]
        break;
 8002dda:	e005      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ddc:	4bac      	ldr	r3, [pc, #688]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	d0ed      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002de8:	2313      	movs	r3, #19
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d154      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002df2:	4ba6      	ldr	r3, [pc, #664]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002df6:	23c0      	movs	r3, #192	@ 0xc0
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d019      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d014      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e0e:	4b9f      	ldr	r3, [pc, #636]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e12:	4aa0      	ldr	r2, [pc, #640]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e18:	4b9c      	ldr	r3, [pc, #624]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e1c:	4b9b      	ldr	r3, [pc, #620]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e1e:	2180      	movs	r1, #128	@ 0x80
 8002e20:	0249      	lsls	r1, r1, #9
 8002e22:	430a      	orrs	r2, r1
 8002e24:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e26:	4b99      	ldr	r3, [pc, #612]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e2a:	4b98      	ldr	r3, [pc, #608]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e2c:	499a      	ldr	r1, [pc, #616]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002e2e:	400a      	ands	r2, r1
 8002e30:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e32:	4b96      	ldr	r3, [pc, #600]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d016      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fd fff8 	bl	8000e34 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e48:	e00c      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fd fff3 	bl	8000e34 <HAL_GetTick>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	4a91      	ldr	r2, [pc, #580]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d904      	bls.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002e5a:	2313      	movs	r3, #19
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	2203      	movs	r2, #3
 8002e60:	701a      	strb	r2, [r3, #0]
            break;
 8002e62:	e004      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e64:	4b89      	ldr	r3, [pc, #548]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e68:	2202      	movs	r2, #2
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d0ed      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002e6e:	2313      	movs	r3, #19
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e78:	4b84      	ldr	r3, [pc, #528]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7c:	4a85      	ldr	r2, [pc, #532]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	0019      	movs	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e86:	4b81      	ldr	r3, [pc, #516]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e8c:	e00c      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e8e:	2312      	movs	r3, #18
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	2213      	movs	r2, #19
 8002e94:	18ba      	adds	r2, r7, r2
 8002e96:	7812      	ldrb	r2, [r2, #0]
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e005      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9c:	2312      	movs	r3, #18
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	2213      	movs	r2, #19
 8002ea2:	18ba      	adds	r2, r7, r2
 8002ea4:	7812      	ldrb	r2, [r2, #0]
 8002ea6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ea8:	2311      	movs	r3, #17
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d105      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb2:	4b76      	ldr	r3, [pc, #472]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002eb6:	4b75      	ldr	r3, [pc, #468]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb8:	4979      	ldr	r1, [pc, #484]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002eba:	400a      	ands	r2, r1
 8002ebc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec8:	4b70      	ldr	r3, [pc, #448]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ecc:	2203      	movs	r2, #3
 8002ece:	4393      	bics	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ee6:	4b69      	ldr	r3, [pc, #420]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eea:	220c      	movs	r2, #12
 8002eec:	4393      	bics	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	4b65      	ldr	r3, [pc, #404]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2210      	movs	r2, #16
 8002f00:	4013      	ands	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f04:	4b61      	ldr	r3, [pc, #388]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f08:	4a66      	ldr	r2, [pc, #408]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	4b5e      	ldr	r3, [pc, #376]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2380      	movs	r3, #128	@ 0x80
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4013      	ands	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f24:	4b59      	ldr	r3, [pc, #356]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f28:	4a5f      	ldr	r2, [pc, #380]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	4b56      	ldr	r3, [pc, #344]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2380      	movs	r3, #128	@ 0x80
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4013      	ands	r3, r2
 8002f42:	d009      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f44:	4b51      	ldr	r3, [pc, #324]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f48:	4a58      	ldr	r2, [pc, #352]	@ (80030ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	4b4e      	ldr	r3, [pc, #312]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f54:	430a      	orrs	r2, r1
 8002f56:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f62:	4b4a      	ldr	r3, [pc, #296]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f66:	4a52      	ldr	r2, [pc, #328]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	4b46      	ldr	r3, [pc, #280]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f72:	430a      	orrs	r2, r1
 8002f74:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	2380      	movs	r3, #128	@ 0x80
 8002f7c:	01db      	lsls	r3, r3, #7
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d015      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f82:	4b42      	ldr	r3, [pc, #264]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	0899      	lsrs	r1, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1a      	ldr	r2, [r3, #32]
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f90:	430a      	orrs	r2, r1
 8002f92:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	2380      	movs	r3, #128	@ 0x80
 8002f9a:	05db      	lsls	r3, r3, #23
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d106      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	4b39      	ldr	r3, [pc, #228]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fa6:	2180      	movs	r1, #128	@ 0x80
 8002fa8:	0249      	lsls	r1, r1, #9
 8002faa:	430a      	orrs	r2, r1
 8002fac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	2380      	movs	r3, #128	@ 0x80
 8002fb4:	031b      	lsls	r3, r3, #12
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fba:	4b34      	ldr	r3, [pc, #208]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbe:	2240      	movs	r2, #64	@ 0x40
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fc8:	4b30      	ldr	r3, [pc, #192]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	039b      	lsls	r3, r3, #14
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d016      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fda:	4b2c      	ldr	r3, [pc, #176]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fde:	4a35      	ldr	r2, [pc, #212]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fe8:	4b28      	ldr	r3, [pc, #160]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fea:	430a      	orrs	r2, r1
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ff2:	2380      	movs	r3, #128	@ 0x80
 8002ff4:	03db      	lsls	r3, r3, #15
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d106      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ffa:	4b24      	ldr	r3, [pc, #144]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	4b23      	ldr	r3, [pc, #140]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003000:	2180      	movs	r1, #128	@ 0x80
 8003002:	0449      	lsls	r1, r1, #17
 8003004:	430a      	orrs	r2, r1
 8003006:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2380      	movs	r3, #128	@ 0x80
 800300e:	03db      	lsls	r3, r3, #15
 8003010:	4013      	ands	r3, r2
 8003012:	d016      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003014:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003018:	4a27      	ldr	r2, [pc, #156]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800301a:	4013      	ands	r3, r2
 800301c:	0019      	movs	r1, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003022:	4b1a      	ldr	r3, [pc, #104]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003024:	430a      	orrs	r2, r1
 8003026:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800302c:	2380      	movs	r3, #128	@ 0x80
 800302e:	045b      	lsls	r3, r3, #17
 8003030:	429a      	cmp	r2, r3
 8003032:	d106      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003034:	4b15      	ldr	r3, [pc, #84]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800303a:	2180      	movs	r1, #128	@ 0x80
 800303c:	0449      	lsls	r1, r1, #17
 800303e:	430a      	orrs	r2, r1
 8003040:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	4013      	ands	r3, r2
 800304c:	d016      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800304e:	4b0f      	ldr	r3, [pc, #60]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	4a1a      	ldr	r2, [pc, #104]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003054:	4013      	ands	r3, r2
 8003056:	0019      	movs	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800305e:	430a      	orrs	r2, r1
 8003060:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	2380      	movs	r3, #128	@ 0x80
 8003068:	01db      	lsls	r3, r3, #7
 800306a:	429a      	cmp	r2, r3
 800306c:	d106      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800306e:	4b07      	ldr	r3, [pc, #28]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	4b06      	ldr	r3, [pc, #24]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003074:	2180      	movs	r1, #128	@ 0x80
 8003076:	0249      	lsls	r1, r1, #9
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800307c:	2312      	movs	r3, #18
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	781b      	ldrb	r3, [r3, #0]
}
 8003082:	0018      	movs	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	b006      	add	sp, #24
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	40021000 	.word	0x40021000
 8003090:	40007000 	.word	0x40007000
 8003094:	fffffcff 	.word	0xfffffcff
 8003098:	fffeffff 	.word	0xfffeffff
 800309c:	00001388 	.word	0x00001388
 80030a0:	efffffff 	.word	0xefffffff
 80030a4:	fffff3ff 	.word	0xfffff3ff
 80030a8:	fff3ffff 	.word	0xfff3ffff
 80030ac:	ffcfffff 	.word	0xffcfffff
 80030b0:	ffffcfff 	.word	0xffffcfff
 80030b4:	ffbfffff 	.word	0xffbfffff
 80030b8:	feffffff 	.word	0xfeffffff
 80030bc:	ffff3fff 	.word	0xffff3fff

080030c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e04a      	b.n	8003168 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	223d      	movs	r2, #61	@ 0x3d
 80030d6:	5c9b      	ldrb	r3, [r3, r2]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d107      	bne.n	80030ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	223c      	movs	r2, #60	@ 0x3c
 80030e2:	2100      	movs	r1, #0
 80030e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7fd fcef 	bl	8000acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	223d      	movs	r2, #61	@ 0x3d
 80030f2:	2102      	movs	r1, #2
 80030f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3304      	adds	r3, #4
 80030fe:	0019      	movs	r1, r3
 8003100:	0010      	movs	r0, r2
 8003102:	f000 fb55 	bl	80037b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2248      	movs	r2, #72	@ 0x48
 800310a:	2101      	movs	r1, #1
 800310c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	223e      	movs	r2, #62	@ 0x3e
 8003112:	2101      	movs	r1, #1
 8003114:	5499      	strb	r1, [r3, r2]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	223f      	movs	r2, #63	@ 0x3f
 800311a:	2101      	movs	r1, #1
 800311c:	5499      	strb	r1, [r3, r2]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2240      	movs	r2, #64	@ 0x40
 8003122:	2101      	movs	r1, #1
 8003124:	5499      	strb	r1, [r3, r2]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2241      	movs	r2, #65	@ 0x41
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2242      	movs	r2, #66	@ 0x42
 8003132:	2101      	movs	r1, #1
 8003134:	5499      	strb	r1, [r3, r2]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2243      	movs	r2, #67	@ 0x43
 800313a:	2101      	movs	r1, #1
 800313c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2244      	movs	r2, #68	@ 0x44
 8003142:	2101      	movs	r1, #1
 8003144:	5499      	strb	r1, [r3, r2]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2245      	movs	r2, #69	@ 0x45
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2246      	movs	r2, #70	@ 0x46
 8003152:	2101      	movs	r1, #1
 8003154:	5499      	strb	r1, [r3, r2]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2247      	movs	r2, #71	@ 0x47
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	223d      	movs	r2, #61	@ 0x3d
 8003162:	2101      	movs	r1, #1
 8003164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e04a      	b.n	8003218 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	223d      	movs	r2, #61	@ 0x3d
 8003186:	5c9b      	ldrb	r3, [r3, r2]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d107      	bne.n	800319e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	223c      	movs	r2, #60	@ 0x3c
 8003192:	2100      	movs	r1, #0
 8003194:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	0018      	movs	r0, r3
 800319a:	f000 f841 	bl	8003220 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	223d      	movs	r2, #61	@ 0x3d
 80031a2:	2102      	movs	r1, #2
 80031a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	0019      	movs	r1, r3
 80031b0:	0010      	movs	r0, r2
 80031b2:	f000 fafd 	bl	80037b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2248      	movs	r2, #72	@ 0x48
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	223e      	movs	r2, #62	@ 0x3e
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	223f      	movs	r2, #63	@ 0x3f
 80031ca:	2101      	movs	r1, #1
 80031cc:	5499      	strb	r1, [r3, r2]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2240      	movs	r2, #64	@ 0x40
 80031d2:	2101      	movs	r1, #1
 80031d4:	5499      	strb	r1, [r3, r2]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2241      	movs	r2, #65	@ 0x41
 80031da:	2101      	movs	r1, #1
 80031dc:	5499      	strb	r1, [r3, r2]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2242      	movs	r2, #66	@ 0x42
 80031e2:	2101      	movs	r1, #1
 80031e4:	5499      	strb	r1, [r3, r2]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2243      	movs	r2, #67	@ 0x43
 80031ea:	2101      	movs	r1, #1
 80031ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2244      	movs	r2, #68	@ 0x44
 80031f2:	2101      	movs	r1, #1
 80031f4:	5499      	strb	r1, [r3, r2]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2245      	movs	r2, #69	@ 0x45
 80031fa:	2101      	movs	r1, #1
 80031fc:	5499      	strb	r1, [r3, r2]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2246      	movs	r2, #70	@ 0x46
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2247      	movs	r2, #71	@ 0x47
 800320a:	2101      	movs	r1, #1
 800320c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	223d      	movs	r2, #61	@ 0x3d
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b002      	add	sp, #8
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003228:	46c0      	nop			@ (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b002      	add	sp, #8
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d108      	bne.n	8003252 <HAL_TIM_PWM_Start+0x22>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	223e      	movs	r2, #62	@ 0x3e
 8003244:	5c9b      	ldrb	r3, [r3, r2]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	1e5a      	subs	r2, r3, #1
 800324c:	4193      	sbcs	r3, r2
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e037      	b.n	80032c2 <HAL_TIM_PWM_Start+0x92>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d108      	bne.n	800326a <HAL_TIM_PWM_Start+0x3a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	223f      	movs	r2, #63	@ 0x3f
 800325c:	5c9b      	ldrb	r3, [r3, r2]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	1e5a      	subs	r2, r3, #1
 8003264:	4193      	sbcs	r3, r2
 8003266:	b2db      	uxtb	r3, r3
 8003268:	e02b      	b.n	80032c2 <HAL_TIM_PWM_Start+0x92>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d108      	bne.n	8003282 <HAL_TIM_PWM_Start+0x52>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2240      	movs	r2, #64	@ 0x40
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	1e5a      	subs	r2, r3, #1
 800327c:	4193      	sbcs	r3, r2
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e01f      	b.n	80032c2 <HAL_TIM_PWM_Start+0x92>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d108      	bne.n	800329a <HAL_TIM_PWM_Start+0x6a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2241      	movs	r2, #65	@ 0x41
 800328c:	5c9b      	ldrb	r3, [r3, r2]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	1e5a      	subs	r2, r3, #1
 8003294:	4193      	sbcs	r3, r2
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e013      	b.n	80032c2 <HAL_TIM_PWM_Start+0x92>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b10      	cmp	r3, #16
 800329e:	d108      	bne.n	80032b2 <HAL_TIM_PWM_Start+0x82>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2242      	movs	r2, #66	@ 0x42
 80032a4:	5c9b      	ldrb	r3, [r3, r2]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	1e5a      	subs	r2, r3, #1
 80032ac:	4193      	sbcs	r3, r2
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	e007      	b.n	80032c2 <HAL_TIM_PWM_Start+0x92>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2243      	movs	r2, #67	@ 0x43
 80032b6:	5c9b      	ldrb	r3, [r3, r2]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	1e5a      	subs	r2, r3, #1
 80032be:	4193      	sbcs	r3, r2
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e08b      	b.n	80033e2 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d104      	bne.n	80032da <HAL_TIM_PWM_Start+0xaa>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	223e      	movs	r2, #62	@ 0x3e
 80032d4:	2102      	movs	r1, #2
 80032d6:	5499      	strb	r1, [r3, r2]
 80032d8:	e023      	b.n	8003322 <HAL_TIM_PWM_Start+0xf2>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d104      	bne.n	80032ea <HAL_TIM_PWM_Start+0xba>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	223f      	movs	r2, #63	@ 0x3f
 80032e4:	2102      	movs	r1, #2
 80032e6:	5499      	strb	r1, [r3, r2]
 80032e8:	e01b      	b.n	8003322 <HAL_TIM_PWM_Start+0xf2>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_PWM_Start+0xca>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2240      	movs	r2, #64	@ 0x40
 80032f4:	2102      	movs	r1, #2
 80032f6:	5499      	strb	r1, [r3, r2]
 80032f8:	e013      	b.n	8003322 <HAL_TIM_PWM_Start+0xf2>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d104      	bne.n	800330a <HAL_TIM_PWM_Start+0xda>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2241      	movs	r2, #65	@ 0x41
 8003304:	2102      	movs	r1, #2
 8003306:	5499      	strb	r1, [r3, r2]
 8003308:	e00b      	b.n	8003322 <HAL_TIM_PWM_Start+0xf2>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b10      	cmp	r3, #16
 800330e:	d104      	bne.n	800331a <HAL_TIM_PWM_Start+0xea>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2242      	movs	r2, #66	@ 0x42
 8003314:	2102      	movs	r1, #2
 8003316:	5499      	strb	r1, [r3, r2]
 8003318:	e003      	b.n	8003322 <HAL_TIM_PWM_Start+0xf2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2243      	movs	r2, #67	@ 0x43
 800331e:	2102      	movs	r1, #2
 8003320:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6839      	ldr	r1, [r7, #0]
 8003328:	2201      	movs	r2, #1
 800332a:	0018      	movs	r0, r3
 800332c:	f000 fe2e 	bl	8003f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2d      	ldr	r2, [pc, #180]	@ (80033ec <HAL_TIM_PWM_Start+0x1bc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00e      	beq.n	8003358 <HAL_TIM_PWM_Start+0x128>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2c      	ldr	r2, [pc, #176]	@ (80033f0 <HAL_TIM_PWM_Start+0x1c0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d009      	beq.n	8003358 <HAL_TIM_PWM_Start+0x128>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2a      	ldr	r2, [pc, #168]	@ (80033f4 <HAL_TIM_PWM_Start+0x1c4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_TIM_PWM_Start+0x128>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a29      	ldr	r2, [pc, #164]	@ (80033f8 <HAL_TIM_PWM_Start+0x1c8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_TIM_PWM_Start+0x12c>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_TIM_PWM_Start+0x12e>
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2180      	movs	r1, #128	@ 0x80
 800336e:	0209      	lsls	r1, r1, #8
 8003370:	430a      	orrs	r2, r1
 8003372:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1c      	ldr	r2, [pc, #112]	@ (80033ec <HAL_TIM_PWM_Start+0x1bc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00f      	beq.n	800339e <HAL_TIM_PWM_Start+0x16e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	05db      	lsls	r3, r3, #23
 8003386:	429a      	cmp	r2, r3
 8003388:	d009      	beq.n	800339e <HAL_TIM_PWM_Start+0x16e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1b      	ldr	r2, [pc, #108]	@ (80033fc <HAL_TIM_PWM_Start+0x1cc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_TIM_PWM_Start+0x16e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a15      	ldr	r2, [pc, #84]	@ (80033f0 <HAL_TIM_PWM_Start+0x1c0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d116      	bne.n	80033cc <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a16      	ldr	r2, [pc, #88]	@ (8003400 <HAL_TIM_PWM_Start+0x1d0>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b06      	cmp	r3, #6
 80033ae:	d016      	beq.n	80033de <HAL_TIM_PWM_Start+0x1ae>
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	2380      	movs	r3, #128	@ 0x80
 80033b4:	025b      	lsls	r3, r3, #9
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d011      	beq.n	80033de <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2101      	movs	r1, #1
 80033c6:	430a      	orrs	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ca:	e008      	b.n	80033de <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2101      	movs	r1, #1
 80033d8:	430a      	orrs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e000      	b.n	80033e0 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033de:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	0018      	movs	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b004      	add	sp, #16
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	46c0      	nop			@ (mov r8, r8)
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40014400 	.word	0x40014400
 80033f8:	40014800 	.word	0x40014800
 80033fc:	40000400 	.word	0x40000400
 8003400:	00010007 	.word	0x00010007

08003404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003410:	2317      	movs	r3, #23
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	223c      	movs	r2, #60	@ 0x3c
 800341c:	5c9b      	ldrb	r3, [r3, r2]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003422:	2302      	movs	r3, #2
 8003424:	e0e5      	b.n	80035f2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	223c      	movs	r2, #60	@ 0x3c
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b14      	cmp	r3, #20
 8003432:	d900      	bls.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003434:	e0d1      	b.n	80035da <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	009a      	lsls	r2, r3, #2
 800343a:	4b70      	ldr	r3, [pc, #448]	@ (80035fc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800343c:	18d3      	adds	r3, r2, r3
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	0011      	movs	r1, r2
 800344a:	0018      	movs	r0, r3
 800344c:	f000 fa3e 	bl	80038cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2108      	movs	r1, #8
 800345c:	430a      	orrs	r2, r1
 800345e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2104      	movs	r1, #4
 800346c:	438a      	bics	r2, r1
 800346e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6999      	ldr	r1, [r3, #24]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	619a      	str	r2, [r3, #24]
      break;
 8003482:	e0af      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	0011      	movs	r1, r2
 800348c:	0018      	movs	r0, r3
 800348e:	f000 faa7 	bl	80039e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699a      	ldr	r2, [r3, #24]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2180      	movs	r1, #128	@ 0x80
 800349e:	0109      	lsls	r1, r1, #4
 80034a0:	430a      	orrs	r2, r1
 80034a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4954      	ldr	r1, [pc, #336]	@ (8003600 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6999      	ldr	r1, [r3, #24]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	021a      	lsls	r2, r3, #8
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	619a      	str	r2, [r3, #24]
      break;
 80034c8:	e08c      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	0011      	movs	r1, r2
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 fb08 	bl	8003ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69da      	ldr	r2, [r3, #28]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2108      	movs	r1, #8
 80034e4:	430a      	orrs	r2, r1
 80034e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69da      	ldr	r2, [r3, #28]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2104      	movs	r1, #4
 80034f4:	438a      	bics	r2, r1
 80034f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69d9      	ldr	r1, [r3, #28]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	61da      	str	r2, [r3, #28]
      break;
 800350a:	e06b      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	0011      	movs	r1, r2
 8003514:	0018      	movs	r0, r3
 8003516:	f000 fb6f 	bl	8003bf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2180      	movs	r1, #128	@ 0x80
 8003526:	0109      	lsls	r1, r1, #4
 8003528:	430a      	orrs	r2, r1
 800352a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4932      	ldr	r1, [pc, #200]	@ (8003600 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003538:	400a      	ands	r2, r1
 800353a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69d9      	ldr	r1, [r3, #28]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	021a      	lsls	r2, r3, #8
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	61da      	str	r2, [r3, #28]
      break;
 8003550:	e048      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	0011      	movs	r1, r2
 800355a:	0018      	movs	r0, r3
 800355c:	f000 fbb6 	bl	8003ccc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2108      	movs	r1, #8
 800356c:	430a      	orrs	r2, r1
 800356e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2104      	movs	r1, #4
 800357c:	438a      	bics	r2, r1
 800357e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003592:	e027      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f000 fbf5 	bl	8003d8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2180      	movs	r1, #128	@ 0x80
 80035ae:	0109      	lsls	r1, r1, #4
 80035b0:	430a      	orrs	r2, r1
 80035b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4910      	ldr	r1, [pc, #64]	@ (8003600 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80035c0:	400a      	ands	r2, r1
 80035c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	021a      	lsls	r2, r3, #8
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035d8:	e004      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80035da:	2317      	movs	r3, #23
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
      break;
 80035e2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	223c      	movs	r2, #60	@ 0x3c
 80035e8:	2100      	movs	r1, #0
 80035ea:	5499      	strb	r1, [r3, r2]

  return status;
 80035ec:	2317      	movs	r3, #23
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	781b      	ldrb	r3, [r3, #0]
}
 80035f2:	0018      	movs	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b006      	add	sp, #24
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	08004e44 	.word	0x08004e44
 8003600:	fffffbff 	.word	0xfffffbff

08003604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	230f      	movs	r3, #15
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	223c      	movs	r2, #60	@ 0x3c
 800361a:	5c9b      	ldrb	r3, [r3, r2]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_TIM_ConfigClockSource+0x20>
 8003620:	2302      	movs	r3, #2
 8003622:	e0bc      	b.n	800379e <HAL_TIM_ConfigClockSource+0x19a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	223c      	movs	r2, #60	@ 0x3c
 8003628:	2101      	movs	r1, #1
 800362a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	223d      	movs	r2, #61	@ 0x3d
 8003630:	2102      	movs	r1, #2
 8003632:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4a5a      	ldr	r2, [pc, #360]	@ (80037a8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003640:	4013      	ands	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4a59      	ldr	r2, [pc, #356]	@ (80037ac <HAL_TIM_ConfigClockSource+0x1a8>)
 8003648:	4013      	ands	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2280      	movs	r2, #128	@ 0x80
 800365a:	0192      	lsls	r2, r2, #6
 800365c:	4293      	cmp	r3, r2
 800365e:	d040      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0xde>
 8003660:	2280      	movs	r2, #128	@ 0x80
 8003662:	0192      	lsls	r2, r2, #6
 8003664:	4293      	cmp	r3, r2
 8003666:	d900      	bls.n	800366a <HAL_TIM_ConfigClockSource+0x66>
 8003668:	e088      	b.n	800377c <HAL_TIM_ConfigClockSource+0x178>
 800366a:	2280      	movs	r2, #128	@ 0x80
 800366c:	0152      	lsls	r2, r2, #5
 800366e:	4293      	cmp	r3, r2
 8003670:	d100      	bne.n	8003674 <HAL_TIM_ConfigClockSource+0x70>
 8003672:	e088      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x182>
 8003674:	2280      	movs	r2, #128	@ 0x80
 8003676:	0152      	lsls	r2, r2, #5
 8003678:	4293      	cmp	r3, r2
 800367a:	d900      	bls.n	800367e <HAL_TIM_ConfigClockSource+0x7a>
 800367c:	e07e      	b.n	800377c <HAL_TIM_ConfigClockSource+0x178>
 800367e:	2b70      	cmp	r3, #112	@ 0x70
 8003680:	d018      	beq.n	80036b4 <HAL_TIM_ConfigClockSource+0xb0>
 8003682:	d900      	bls.n	8003686 <HAL_TIM_ConfigClockSource+0x82>
 8003684:	e07a      	b.n	800377c <HAL_TIM_ConfigClockSource+0x178>
 8003686:	2b60      	cmp	r3, #96	@ 0x60
 8003688:	d04f      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x126>
 800368a:	d900      	bls.n	800368e <HAL_TIM_ConfigClockSource+0x8a>
 800368c:	e076      	b.n	800377c <HAL_TIM_ConfigClockSource+0x178>
 800368e:	2b50      	cmp	r3, #80	@ 0x50
 8003690:	d03b      	beq.n	800370a <HAL_TIM_ConfigClockSource+0x106>
 8003692:	d900      	bls.n	8003696 <HAL_TIM_ConfigClockSource+0x92>
 8003694:	e072      	b.n	800377c <HAL_TIM_ConfigClockSource+0x178>
 8003696:	2b40      	cmp	r3, #64	@ 0x40
 8003698:	d057      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x146>
 800369a:	d900      	bls.n	800369e <HAL_TIM_ConfigClockSource+0x9a>
 800369c:	e06e      	b.n	800377c <HAL_TIM_ConfigClockSource+0x178>
 800369e:	2b30      	cmp	r3, #48	@ 0x30
 80036a0:	d063      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x166>
 80036a2:	d86b      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x178>
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d060      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x166>
 80036a8:	d868      	bhi.n	800377c <HAL_TIM_ConfigClockSource+0x178>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d05d      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x166>
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d05b      	beq.n	800376a <HAL_TIM_ConfigClockSource+0x166>
 80036b2:	e063      	b.n	800377c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036c4:	f000 fc42 	bl	8003f4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2277      	movs	r2, #119	@ 0x77
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	609a      	str	r2, [r3, #8]
      break;
 80036e0:	e052      	b.n	8003788 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036f2:	f000 fc2b 	bl	8003f4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2180      	movs	r1, #128	@ 0x80
 8003702:	01c9      	lsls	r1, r1, #7
 8003704:	430a      	orrs	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
      break;
 8003708:	e03e      	b.n	8003788 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003716:	001a      	movs	r2, r3
 8003718:	f000 fb9c 	bl	8003e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2150      	movs	r1, #80	@ 0x50
 8003722:	0018      	movs	r0, r3
 8003724:	f000 fbf6 	bl	8003f14 <TIM_ITRx_SetConfig>
      break;
 8003728:	e02e      	b.n	8003788 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003736:	001a      	movs	r2, r3
 8003738:	f000 fbba 	bl	8003eb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2160      	movs	r1, #96	@ 0x60
 8003742:	0018      	movs	r0, r3
 8003744:	f000 fbe6 	bl	8003f14 <TIM_ITRx_SetConfig>
      break;
 8003748:	e01e      	b.n	8003788 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003756:	001a      	movs	r2, r3
 8003758:	f000 fb7c 	bl	8003e54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2140      	movs	r1, #64	@ 0x40
 8003762:	0018      	movs	r0, r3
 8003764:	f000 fbd6 	bl	8003f14 <TIM_ITRx_SetConfig>
      break;
 8003768:	e00e      	b.n	8003788 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	0019      	movs	r1, r3
 8003774:	0010      	movs	r0, r2
 8003776:	f000 fbcd 	bl	8003f14 <TIM_ITRx_SetConfig>
      break;
 800377a:	e005      	b.n	8003788 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800377c:	230f      	movs	r3, #15
 800377e:	18fb      	adds	r3, r7, r3
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
      break;
 8003784:	e000      	b.n	8003788 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003786:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	223d      	movs	r2, #61	@ 0x3d
 800378c:	2101      	movs	r1, #1
 800378e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	223c      	movs	r2, #60	@ 0x3c
 8003794:	2100      	movs	r1, #0
 8003796:	5499      	strb	r1, [r3, r2]

  return status;
 8003798:	230f      	movs	r3, #15
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	781b      	ldrb	r3, [r3, #0]
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b004      	add	sp, #16
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	ffceff88 	.word	0xffceff88
 80037ac:	ffff00ff 	.word	0xffff00ff

080037b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a3b      	ldr	r2, [pc, #236]	@ (80038b0 <TIM_Base_SetConfig+0x100>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d008      	beq.n	80037da <TIM_Base_SetConfig+0x2a>
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	2380      	movs	r3, #128	@ 0x80
 80037cc:	05db      	lsls	r3, r3, #23
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d003      	beq.n	80037da <TIM_Base_SetConfig+0x2a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a37      	ldr	r2, [pc, #220]	@ (80038b4 <TIM_Base_SetConfig+0x104>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d108      	bne.n	80037ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2270      	movs	r2, #112	@ 0x70
 80037de:	4393      	bics	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a30      	ldr	r2, [pc, #192]	@ (80038b0 <TIM_Base_SetConfig+0x100>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d018      	beq.n	8003826 <TIM_Base_SetConfig+0x76>
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	2380      	movs	r3, #128	@ 0x80
 80037f8:	05db      	lsls	r3, r3, #23
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d013      	beq.n	8003826 <TIM_Base_SetConfig+0x76>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a2c      	ldr	r2, [pc, #176]	@ (80038b4 <TIM_Base_SetConfig+0x104>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00f      	beq.n	8003826 <TIM_Base_SetConfig+0x76>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a2b      	ldr	r2, [pc, #172]	@ (80038b8 <TIM_Base_SetConfig+0x108>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00b      	beq.n	8003826 <TIM_Base_SetConfig+0x76>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a2a      	ldr	r2, [pc, #168]	@ (80038bc <TIM_Base_SetConfig+0x10c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <TIM_Base_SetConfig+0x76>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a29      	ldr	r2, [pc, #164]	@ (80038c0 <TIM_Base_SetConfig+0x110>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d003      	beq.n	8003826 <TIM_Base_SetConfig+0x76>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a28      	ldr	r2, [pc, #160]	@ (80038c4 <TIM_Base_SetConfig+0x114>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d108      	bne.n	8003838 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a27      	ldr	r2, [pc, #156]	@ (80038c8 <TIM_Base_SetConfig+0x118>)
 800382a:	4013      	ands	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2280      	movs	r2, #128	@ 0x80
 800383c:	4393      	bics	r3, r2
 800383e:	001a      	movs	r2, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a13      	ldr	r2, [pc, #76]	@ (80038b0 <TIM_Base_SetConfig+0x100>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00b      	beq.n	800387e <TIM_Base_SetConfig+0xce>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a14      	ldr	r2, [pc, #80]	@ (80038bc <TIM_Base_SetConfig+0x10c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d007      	beq.n	800387e <TIM_Base_SetConfig+0xce>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a13      	ldr	r2, [pc, #76]	@ (80038c0 <TIM_Base_SetConfig+0x110>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d003      	beq.n	800387e <TIM_Base_SetConfig+0xce>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a12      	ldr	r2, [pc, #72]	@ (80038c4 <TIM_Base_SetConfig+0x114>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d103      	bne.n	8003886 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2201      	movs	r2, #1
 8003892:	4013      	ands	r3, r2
 8003894:	2b01      	cmp	r3, #1
 8003896:	d106      	bne.n	80038a6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2201      	movs	r2, #1
 800389e:	4393      	bics	r3, r2
 80038a0:	001a      	movs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	611a      	str	r2, [r3, #16]
  }
}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b004      	add	sp, #16
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40000400 	.word	0x40000400
 80038b8:	40002000 	.word	0x40002000
 80038bc:	40014000 	.word	0x40014000
 80038c0:	40014400 	.word	0x40014400
 80038c4:	40014800 	.word	0x40014800
 80038c8:	fffffcff 	.word	0xfffffcff

080038cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	2201      	movs	r2, #1
 80038e2:	4393      	bics	r3, r2
 80038e4:	001a      	movs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a32      	ldr	r2, [pc, #200]	@ (80039c4 <TIM_OC1_SetConfig+0xf8>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2203      	movs	r2, #3
 8003902:	4393      	bics	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2202      	movs	r2, #2
 8003914:	4393      	bics	r3, r2
 8003916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a28      	ldr	r2, [pc, #160]	@ (80039c8 <TIM_OC1_SetConfig+0xfc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00b      	beq.n	8003942 <TIM_OC1_SetConfig+0x76>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a27      	ldr	r2, [pc, #156]	@ (80039cc <TIM_OC1_SetConfig+0x100>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <TIM_OC1_SetConfig+0x76>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a26      	ldr	r2, [pc, #152]	@ (80039d0 <TIM_OC1_SetConfig+0x104>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_OC1_SetConfig+0x76>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a25      	ldr	r2, [pc, #148]	@ (80039d4 <TIM_OC1_SetConfig+0x108>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10c      	bne.n	800395c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2208      	movs	r2, #8
 8003946:	4393      	bics	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2204      	movs	r2, #4
 8003958:	4393      	bics	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <TIM_OC1_SetConfig+0xfc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00b      	beq.n	800397c <TIM_OC1_SetConfig+0xb0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a19      	ldr	r2, [pc, #100]	@ (80039cc <TIM_OC1_SetConfig+0x100>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d007      	beq.n	800397c <TIM_OC1_SetConfig+0xb0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a18      	ldr	r2, [pc, #96]	@ (80039d0 <TIM_OC1_SetConfig+0x104>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_OC1_SetConfig+0xb0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a17      	ldr	r2, [pc, #92]	@ (80039d4 <TIM_OC1_SetConfig+0x108>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d111      	bne.n	80039a0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4a16      	ldr	r2, [pc, #88]	@ (80039d8 <TIM_OC1_SetConfig+0x10c>)
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4a15      	ldr	r2, [pc, #84]	@ (80039dc <TIM_OC1_SetConfig+0x110>)
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b006      	add	sp, #24
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	fffeff8f 	.word	0xfffeff8f
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40014800 	.word	0x40014800
 80039d8:	fffffeff 	.word	0xfffffeff
 80039dc:	fffffdff 	.word	0xfffffdff

080039e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	2210      	movs	r2, #16
 80039f6:	4393      	bics	r3, r2
 80039f8:	001a      	movs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac8 <TIM_OC2_SetConfig+0xe8>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a2d      	ldr	r2, [pc, #180]	@ (8003acc <TIM_OC2_SetConfig+0xec>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	4393      	bics	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a24      	ldr	r2, [pc, #144]	@ (8003ad0 <TIM_OC2_SetConfig+0xf0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d10d      	bne.n	8003a5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2280      	movs	r2, #128	@ 0x80
 8003a46:	4393      	bics	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2240      	movs	r2, #64	@ 0x40
 8003a5a:	4393      	bics	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad0 <TIM_OC2_SetConfig+0xf0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00b      	beq.n	8003a7e <TIM_OC2_SetConfig+0x9e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad4 <TIM_OC2_SetConfig+0xf4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d007      	beq.n	8003a7e <TIM_OC2_SetConfig+0x9e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a19      	ldr	r2, [pc, #100]	@ (8003ad8 <TIM_OC2_SetConfig+0xf8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_OC2_SetConfig+0x9e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a18      	ldr	r2, [pc, #96]	@ (8003adc <TIM_OC2_SetConfig+0xfc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d113      	bne.n	8003aa6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4a17      	ldr	r2, [pc, #92]	@ (8003ae0 <TIM_OC2_SetConfig+0x100>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4a16      	ldr	r2, [pc, #88]	@ (8003ae4 <TIM_OC2_SetConfig+0x104>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	621a      	str	r2, [r3, #32]
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b006      	add	sp, #24
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	feff8fff 	.word	0xfeff8fff
 8003acc:	fffffcff 	.word	0xfffffcff
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40014400 	.word	0x40014400
 8003adc:	40014800 	.word	0x40014800
 8003ae0:	fffffbff 	.word	0xfffffbff
 8003ae4:	fffff7ff 	.word	0xfffff7ff

08003ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	4a33      	ldr	r2, [pc, #204]	@ (8003bcc <TIM_OC3_SetConfig+0xe4>)
 8003afe:	401a      	ands	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a2f      	ldr	r2, [pc, #188]	@ (8003bd0 <TIM_OC3_SetConfig+0xe8>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	4393      	bics	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	4a29      	ldr	r2, [pc, #164]	@ (8003bd4 <TIM_OC3_SetConfig+0xec>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a25      	ldr	r2, [pc, #148]	@ (8003bd8 <TIM_OC3_SetConfig+0xf0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10d      	bne.n	8003b62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4a24      	ldr	r2, [pc, #144]	@ (8003bdc <TIM_OC3_SetConfig+0xf4>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4a20      	ldr	r2, [pc, #128]	@ (8003be0 <TIM_OC3_SetConfig+0xf8>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd8 <TIM_OC3_SetConfig+0xf0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00b      	beq.n	8003b82 <TIM_OC3_SetConfig+0x9a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <TIM_OC3_SetConfig+0xfc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d007      	beq.n	8003b82 <TIM_OC3_SetConfig+0x9a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1c      	ldr	r2, [pc, #112]	@ (8003be8 <TIM_OC3_SetConfig+0x100>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d003      	beq.n	8003b82 <TIM_OC3_SetConfig+0x9a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bec <TIM_OC3_SetConfig+0x104>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d113      	bne.n	8003baa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf0 <TIM_OC3_SetConfig+0x108>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4a19      	ldr	r2, [pc, #100]	@ (8003bf4 <TIM_OC3_SetConfig+0x10c>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	621a      	str	r2, [r3, #32]
}
 8003bc4:	46c0      	nop			@ (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b006      	add	sp, #24
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	fffffeff 	.word	0xfffffeff
 8003bd0:	fffeff8f 	.word	0xfffeff8f
 8003bd4:	fffffdff 	.word	0xfffffdff
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	fffff7ff 	.word	0xfffff7ff
 8003be0:	fffffbff 	.word	0xfffffbff
 8003be4:	40014000 	.word	0x40014000
 8003be8:	40014400 	.word	0x40014400
 8003bec:	40014800 	.word	0x40014800
 8003bf0:	ffffefff 	.word	0xffffefff
 8003bf4:	ffffdfff 	.word	0xffffdfff

08003bf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	4a26      	ldr	r2, [pc, #152]	@ (8003ca8 <TIM_OC4_SetConfig+0xb0>)
 8003c0e:	401a      	ands	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a22      	ldr	r2, [pc, #136]	@ (8003cac <TIM_OC4_SetConfig+0xb4>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a21      	ldr	r2, [pc, #132]	@ (8003cb0 <TIM_OC4_SetConfig+0xb8>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb4 <TIM_OC4_SetConfig+0xbc>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	031b      	lsls	r3, r3, #12
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a19      	ldr	r2, [pc, #100]	@ (8003cb8 <TIM_OC4_SetConfig+0xc0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00b      	beq.n	8003c70 <TIM_OC4_SetConfig+0x78>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a18      	ldr	r2, [pc, #96]	@ (8003cbc <TIM_OC4_SetConfig+0xc4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d007      	beq.n	8003c70 <TIM_OC4_SetConfig+0x78>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a17      	ldr	r2, [pc, #92]	@ (8003cc0 <TIM_OC4_SetConfig+0xc8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_OC4_SetConfig+0x78>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a16      	ldr	r2, [pc, #88]	@ (8003cc4 <TIM_OC4_SetConfig+0xcc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d109      	bne.n	8003c84 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	4a15      	ldr	r2, [pc, #84]	@ (8003cc8 <TIM_OC4_SetConfig+0xd0>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	019b      	lsls	r3, r3, #6
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	621a      	str	r2, [r3, #32]
}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b006      	add	sp, #24
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	ffffefff 	.word	0xffffefff
 8003cac:	feff8fff 	.word	0xfeff8fff
 8003cb0:	fffffcff 	.word	0xfffffcff
 8003cb4:	ffffdfff 	.word	0xffffdfff
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40014400 	.word	0x40014400
 8003cc4:	40014800 	.word	0x40014800
 8003cc8:	ffffbfff 	.word	0xffffbfff

08003ccc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	4a23      	ldr	r2, [pc, #140]	@ (8003d70 <TIM_OC5_SetConfig+0xa4>)
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d74 <TIM_OC5_SetConfig+0xa8>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4a1b      	ldr	r2, [pc, #108]	@ (8003d78 <TIM_OC5_SetConfig+0xac>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	041b      	lsls	r3, r3, #16
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a17      	ldr	r2, [pc, #92]	@ (8003d7c <TIM_OC5_SetConfig+0xb0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00b      	beq.n	8003d3a <TIM_OC5_SetConfig+0x6e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a16      	ldr	r2, [pc, #88]	@ (8003d80 <TIM_OC5_SetConfig+0xb4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d007      	beq.n	8003d3a <TIM_OC5_SetConfig+0x6e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a15      	ldr	r2, [pc, #84]	@ (8003d84 <TIM_OC5_SetConfig+0xb8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d003      	beq.n	8003d3a <TIM_OC5_SetConfig+0x6e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a14      	ldr	r2, [pc, #80]	@ (8003d88 <TIM_OC5_SetConfig+0xbc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d109      	bne.n	8003d4e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003d70 <TIM_OC5_SetConfig+0xa4>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	621a      	str	r2, [r3, #32]
}
 8003d68:	46c0      	nop			@ (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b006      	add	sp, #24
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	fffeffff 	.word	0xfffeffff
 8003d74:	fffeff8f 	.word	0xfffeff8f
 8003d78:	fffdffff 	.word	0xfffdffff
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800

08003d8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4a24      	ldr	r2, [pc, #144]	@ (8003e34 <TIM_OC6_SetConfig+0xa8>)
 8003da2:	401a      	ands	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a20      	ldr	r2, [pc, #128]	@ (8003e38 <TIM_OC6_SetConfig+0xac>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4a1c      	ldr	r2, [pc, #112]	@ (8003e3c <TIM_OC6_SetConfig+0xb0>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	051b      	lsls	r3, r3, #20
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a18      	ldr	r2, [pc, #96]	@ (8003e40 <TIM_OC6_SetConfig+0xb4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00b      	beq.n	8003dfc <TIM_OC6_SetConfig+0x70>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a17      	ldr	r2, [pc, #92]	@ (8003e44 <TIM_OC6_SetConfig+0xb8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d007      	beq.n	8003dfc <TIM_OC6_SetConfig+0x70>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a16      	ldr	r2, [pc, #88]	@ (8003e48 <TIM_OC6_SetConfig+0xbc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_OC6_SetConfig+0x70>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a15      	ldr	r2, [pc, #84]	@ (8003e4c <TIM_OC6_SetConfig+0xc0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d109      	bne.n	8003e10 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	4a14      	ldr	r2, [pc, #80]	@ (8003e50 <TIM_OC6_SetConfig+0xc4>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	029b      	lsls	r3, r3, #10
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b006      	add	sp, #24
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	ffefffff 	.word	0xffefffff
 8003e38:	feff8fff 	.word	0xfeff8fff
 8003e3c:	ffdfffff 	.word	0xffdfffff
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40014000 	.word	0x40014000
 8003e48:	40014400 	.word	0x40014400
 8003e4c:	40014800 	.word	0x40014800
 8003e50:	fffbffff 	.word	0xfffbffff

08003e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	4393      	bics	r3, r2
 8003e6e:	001a      	movs	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	22f0      	movs	r2, #240	@ 0xf0
 8003e7e:	4393      	bics	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	220a      	movs	r2, #10
 8003e90:	4393      	bics	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	621a      	str	r2, [r3, #32]
}
 8003ea8:	46c0      	nop			@ (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b006      	add	sp, #24
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	4393      	bics	r3, r2
 8003eca:	001a      	movs	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f10 <TIM_TI2_ConfigInputStage+0x60>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	031b      	lsls	r3, r3, #12
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	22a0      	movs	r2, #160	@ 0xa0
 8003eec:	4393      	bics	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b006      	add	sp, #24
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			@ (mov r8, r8)
 8003f10:	ffff0fff 	.word	0xffff0fff

08003f14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a08      	ldr	r2, [pc, #32]	@ (8003f48 <TIM_ITRx_SetConfig+0x34>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	2207      	movs	r2, #7
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	609a      	str	r2, [r3, #8]
}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b004      	add	sp, #16
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	ffcfff8f 	.word	0xffcfff8f

08003f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	4a09      	ldr	r2, [pc, #36]	@ (8003f88 <TIM_ETR_SetConfig+0x3c>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	021a      	lsls	r2, r3, #8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	46c0      	nop			@ (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b006      	add	sp, #24
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	ffff00ff 	.word	0xffff00ff

08003f8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	221f      	movs	r2, #31
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	0013      	movs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	43d2      	mvns	r2, r2
 8003fae:	401a      	ands	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a1a      	ldr	r2, [r3, #32]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	211f      	movs	r1, #31
 8003fbc:	400b      	ands	r3, r1
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4099      	lsls	r1, r3
 8003fc2:	000b      	movs	r3, r1
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b006      	add	sp, #24
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	223c      	movs	r2, #60	@ 0x3c
 8003fe2:	5c9b      	ldrb	r3, [r3, r2]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e055      	b.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	223c      	movs	r2, #60	@ 0x3c
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	223d      	movs	r2, #61	@ 0x3d
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a23      	ldr	r2, [pc, #140]	@ (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d108      	bne.n	8004028 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a22      	ldr	r2, [pc, #136]	@ (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800401a:	4013      	ands	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2270      	movs	r2, #112	@ 0x70
 800402c:	4393      	bics	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a16      	ldr	r2, [pc, #88]	@ (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00f      	beq.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	2380      	movs	r3, #128	@ 0x80
 8004052:	05db      	lsls	r3, r3, #23
 8004054:	429a      	cmp	r2, r3
 8004056:	d009      	beq.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a12      	ldr	r2, [pc, #72]	@ (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a11      	ldr	r2, [pc, #68]	@ (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d10c      	bne.n	8004086 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2280      	movs	r2, #128	@ 0x80
 8004070:	4393      	bics	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	4313      	orrs	r3, r2
 800407c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	223d      	movs	r2, #61	@ 0x3d
 800408a:	2101      	movs	r1, #1
 800408c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	223c      	movs	r2, #60	@ 0x3c
 8004092:	2100      	movs	r1, #0
 8004094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	0018      	movs	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	b004      	add	sp, #16
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	ff0fffff 	.word	0xff0fffff
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40014000 	.word	0x40014000

080040b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e046      	b.n	8004150 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2288      	movs	r2, #136	@ 0x88
 80040c6:	589b      	ldr	r3, [r3, r2]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2284      	movs	r2, #132	@ 0x84
 80040d0:	2100      	movs	r1, #0
 80040d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7fc fda2 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2288      	movs	r2, #136	@ 0x88
 80040e0:	2124      	movs	r1, #36	@ 0x24
 80040e2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2101      	movs	r1, #1
 80040f0:	438a      	bics	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 faea 	bl	80046d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	0018      	movs	r0, r3
 8004108:	f000 f828 	bl	800415c <UART_SetConfig>
 800410c:	0003      	movs	r3, r0
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e01c      	b.n	8004150 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	490d      	ldr	r1, [pc, #52]	@ (8004158 <HAL_UART_Init+0xa8>)
 8004122:	400a      	ands	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	212a      	movs	r1, #42	@ 0x2a
 8004132:	438a      	bics	r2, r1
 8004134:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2101      	movs	r1, #1
 8004142:	430a      	orrs	r2, r1
 8004144:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0018      	movs	r0, r3
 800414a:	f000 fb79 	bl	8004840 <UART_CheckIdleState>
 800414e:	0003      	movs	r3, r0
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	b002      	add	sp, #8
 8004156:	bd80      	pop	{r7, pc}
 8004158:	ffffb7ff 	.word	0xffffb7ff

0800415c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800415c:	b5b0      	push	{r4, r5, r7, lr}
 800415e:	b090      	sub	sp, #64	@ 0x40
 8004160:	af00      	add	r7, sp, #0
 8004162:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004164:	231a      	movs	r3, #26
 8004166:	2220      	movs	r2, #32
 8004168:	189b      	adds	r3, r3, r2
 800416a:	19db      	adds	r3, r3, r7
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	431a      	orrs	r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	431a      	orrs	r2, r3
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	4313      	orrs	r3, r2
 8004186:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4aaf      	ldr	r2, [pc, #700]	@ (800444c <UART_SetConfig+0x2f0>)
 8004190:	4013      	ands	r3, r2
 8004192:	0019      	movs	r1, r3
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800419a:	430b      	orrs	r3, r1
 800419c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4aaa      	ldr	r2, [pc, #680]	@ (8004450 <UART_SetConfig+0x2f4>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	0018      	movs	r0, r3
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	68d9      	ldr	r1, [r3, #12]
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	0003      	movs	r3, r0
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4aa4      	ldr	r2, [pc, #656]	@ (8004454 <UART_SetConfig+0x2f8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041ce:	4313      	orrs	r3, r2
 80041d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a9f      	ldr	r2, [pc, #636]	@ (8004458 <UART_SetConfig+0x2fc>)
 80041da:	4013      	ands	r3, r2
 80041dc:	0019      	movs	r1, r3
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	220f      	movs	r2, #15
 80041f0:	4393      	bics	r3, r2
 80041f2:	0018      	movs	r0, r3
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	0003      	movs	r3, r0
 80041fe:	430b      	orrs	r3, r1
 8004200:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a95      	ldr	r2, [pc, #596]	@ (800445c <UART_SetConfig+0x300>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d131      	bne.n	8004270 <UART_SetConfig+0x114>
 800420c:	4b94      	ldr	r3, [pc, #592]	@ (8004460 <UART_SetConfig+0x304>)
 800420e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004210:	2203      	movs	r2, #3
 8004212:	4013      	ands	r3, r2
 8004214:	2b03      	cmp	r3, #3
 8004216:	d01d      	beq.n	8004254 <UART_SetConfig+0xf8>
 8004218:	d823      	bhi.n	8004262 <UART_SetConfig+0x106>
 800421a:	2b02      	cmp	r3, #2
 800421c:	d00c      	beq.n	8004238 <UART_SetConfig+0xdc>
 800421e:	d820      	bhi.n	8004262 <UART_SetConfig+0x106>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <UART_SetConfig+0xce>
 8004224:	2b01      	cmp	r3, #1
 8004226:	d00e      	beq.n	8004246 <UART_SetConfig+0xea>
 8004228:	e01b      	b.n	8004262 <UART_SetConfig+0x106>
 800422a:	231b      	movs	r3, #27
 800422c:	2220      	movs	r2, #32
 800422e:	189b      	adds	r3, r3, r2
 8004230:	19db      	adds	r3, r3, r7
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	e0b4      	b.n	80043a2 <UART_SetConfig+0x246>
 8004238:	231b      	movs	r3, #27
 800423a:	2220      	movs	r2, #32
 800423c:	189b      	adds	r3, r3, r2
 800423e:	19db      	adds	r3, r3, r7
 8004240:	2202      	movs	r2, #2
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	e0ad      	b.n	80043a2 <UART_SetConfig+0x246>
 8004246:	231b      	movs	r3, #27
 8004248:	2220      	movs	r2, #32
 800424a:	189b      	adds	r3, r3, r2
 800424c:	19db      	adds	r3, r3, r7
 800424e:	2204      	movs	r2, #4
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	e0a6      	b.n	80043a2 <UART_SetConfig+0x246>
 8004254:	231b      	movs	r3, #27
 8004256:	2220      	movs	r2, #32
 8004258:	189b      	adds	r3, r3, r2
 800425a:	19db      	adds	r3, r3, r7
 800425c:	2208      	movs	r2, #8
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	e09f      	b.n	80043a2 <UART_SetConfig+0x246>
 8004262:	231b      	movs	r3, #27
 8004264:	2220      	movs	r2, #32
 8004266:	189b      	adds	r3, r3, r2
 8004268:	19db      	adds	r3, r3, r7
 800426a:	2210      	movs	r2, #16
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	e098      	b.n	80043a2 <UART_SetConfig+0x246>
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a7b      	ldr	r2, [pc, #492]	@ (8004464 <UART_SetConfig+0x308>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d131      	bne.n	80042de <UART_SetConfig+0x182>
 800427a:	4b79      	ldr	r3, [pc, #484]	@ (8004460 <UART_SetConfig+0x304>)
 800427c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427e:	220c      	movs	r2, #12
 8004280:	4013      	ands	r3, r2
 8004282:	2b0c      	cmp	r3, #12
 8004284:	d01d      	beq.n	80042c2 <UART_SetConfig+0x166>
 8004286:	d823      	bhi.n	80042d0 <UART_SetConfig+0x174>
 8004288:	2b08      	cmp	r3, #8
 800428a:	d00c      	beq.n	80042a6 <UART_SetConfig+0x14a>
 800428c:	d820      	bhi.n	80042d0 <UART_SetConfig+0x174>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <UART_SetConfig+0x13c>
 8004292:	2b04      	cmp	r3, #4
 8004294:	d00e      	beq.n	80042b4 <UART_SetConfig+0x158>
 8004296:	e01b      	b.n	80042d0 <UART_SetConfig+0x174>
 8004298:	231b      	movs	r3, #27
 800429a:	2220      	movs	r2, #32
 800429c:	189b      	adds	r3, r3, r2
 800429e:	19db      	adds	r3, r3, r7
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	e07d      	b.n	80043a2 <UART_SetConfig+0x246>
 80042a6:	231b      	movs	r3, #27
 80042a8:	2220      	movs	r2, #32
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	19db      	adds	r3, r3, r7
 80042ae:	2202      	movs	r2, #2
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	e076      	b.n	80043a2 <UART_SetConfig+0x246>
 80042b4:	231b      	movs	r3, #27
 80042b6:	2220      	movs	r2, #32
 80042b8:	189b      	adds	r3, r3, r2
 80042ba:	19db      	adds	r3, r3, r7
 80042bc:	2204      	movs	r2, #4
 80042be:	701a      	strb	r2, [r3, #0]
 80042c0:	e06f      	b.n	80043a2 <UART_SetConfig+0x246>
 80042c2:	231b      	movs	r3, #27
 80042c4:	2220      	movs	r2, #32
 80042c6:	189b      	adds	r3, r3, r2
 80042c8:	19db      	adds	r3, r3, r7
 80042ca:	2208      	movs	r2, #8
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	e068      	b.n	80043a2 <UART_SetConfig+0x246>
 80042d0:	231b      	movs	r3, #27
 80042d2:	2220      	movs	r2, #32
 80042d4:	189b      	adds	r3, r3, r2
 80042d6:	19db      	adds	r3, r3, r7
 80042d8:	2210      	movs	r2, #16
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	e061      	b.n	80043a2 <UART_SetConfig+0x246>
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a61      	ldr	r2, [pc, #388]	@ (8004468 <UART_SetConfig+0x30c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d106      	bne.n	80042f6 <UART_SetConfig+0x19a>
 80042e8:	231b      	movs	r3, #27
 80042ea:	2220      	movs	r2, #32
 80042ec:	189b      	adds	r3, r3, r2
 80042ee:	19db      	adds	r3, r3, r7
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e055      	b.n	80043a2 <UART_SetConfig+0x246>
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a5c      	ldr	r2, [pc, #368]	@ (800446c <UART_SetConfig+0x310>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d106      	bne.n	800430e <UART_SetConfig+0x1b2>
 8004300:	231b      	movs	r3, #27
 8004302:	2220      	movs	r2, #32
 8004304:	189b      	adds	r3, r3, r2
 8004306:	19db      	adds	r3, r3, r7
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e049      	b.n	80043a2 <UART_SetConfig+0x246>
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a50      	ldr	r2, [pc, #320]	@ (8004454 <UART_SetConfig+0x2f8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d13e      	bne.n	8004396 <UART_SetConfig+0x23a>
 8004318:	4b51      	ldr	r3, [pc, #324]	@ (8004460 <UART_SetConfig+0x304>)
 800431a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800431c:	23c0      	movs	r3, #192	@ 0xc0
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	4013      	ands	r3, r2
 8004322:	22c0      	movs	r2, #192	@ 0xc0
 8004324:	0112      	lsls	r2, r2, #4
 8004326:	4293      	cmp	r3, r2
 8004328:	d027      	beq.n	800437a <UART_SetConfig+0x21e>
 800432a:	22c0      	movs	r2, #192	@ 0xc0
 800432c:	0112      	lsls	r2, r2, #4
 800432e:	4293      	cmp	r3, r2
 8004330:	d82a      	bhi.n	8004388 <UART_SetConfig+0x22c>
 8004332:	2280      	movs	r2, #128	@ 0x80
 8004334:	0112      	lsls	r2, r2, #4
 8004336:	4293      	cmp	r3, r2
 8004338:	d011      	beq.n	800435e <UART_SetConfig+0x202>
 800433a:	2280      	movs	r2, #128	@ 0x80
 800433c:	0112      	lsls	r2, r2, #4
 800433e:	4293      	cmp	r3, r2
 8004340:	d822      	bhi.n	8004388 <UART_SetConfig+0x22c>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d004      	beq.n	8004350 <UART_SetConfig+0x1f4>
 8004346:	2280      	movs	r2, #128	@ 0x80
 8004348:	00d2      	lsls	r2, r2, #3
 800434a:	4293      	cmp	r3, r2
 800434c:	d00e      	beq.n	800436c <UART_SetConfig+0x210>
 800434e:	e01b      	b.n	8004388 <UART_SetConfig+0x22c>
 8004350:	231b      	movs	r3, #27
 8004352:	2220      	movs	r2, #32
 8004354:	189b      	adds	r3, r3, r2
 8004356:	19db      	adds	r3, r3, r7
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
 800435c:	e021      	b.n	80043a2 <UART_SetConfig+0x246>
 800435e:	231b      	movs	r3, #27
 8004360:	2220      	movs	r2, #32
 8004362:	189b      	adds	r3, r3, r2
 8004364:	19db      	adds	r3, r3, r7
 8004366:	2202      	movs	r2, #2
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	e01a      	b.n	80043a2 <UART_SetConfig+0x246>
 800436c:	231b      	movs	r3, #27
 800436e:	2220      	movs	r2, #32
 8004370:	189b      	adds	r3, r3, r2
 8004372:	19db      	adds	r3, r3, r7
 8004374:	2204      	movs	r2, #4
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	e013      	b.n	80043a2 <UART_SetConfig+0x246>
 800437a:	231b      	movs	r3, #27
 800437c:	2220      	movs	r2, #32
 800437e:	189b      	adds	r3, r3, r2
 8004380:	19db      	adds	r3, r3, r7
 8004382:	2208      	movs	r2, #8
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e00c      	b.n	80043a2 <UART_SetConfig+0x246>
 8004388:	231b      	movs	r3, #27
 800438a:	2220      	movs	r2, #32
 800438c:	189b      	adds	r3, r3, r2
 800438e:	19db      	adds	r3, r3, r7
 8004390:	2210      	movs	r2, #16
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	e005      	b.n	80043a2 <UART_SetConfig+0x246>
 8004396:	231b      	movs	r3, #27
 8004398:	2220      	movs	r2, #32
 800439a:	189b      	adds	r3, r3, r2
 800439c:	19db      	adds	r3, r3, r7
 800439e:	2210      	movs	r2, #16
 80043a0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004454 <UART_SetConfig+0x2f8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d000      	beq.n	80043ae <UART_SetConfig+0x252>
 80043ac:	e0a9      	b.n	8004502 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043ae:	231b      	movs	r3, #27
 80043b0:	2220      	movs	r2, #32
 80043b2:	189b      	adds	r3, r3, r2
 80043b4:	19db      	adds	r3, r3, r7
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d015      	beq.n	80043e8 <UART_SetConfig+0x28c>
 80043bc:	dc18      	bgt.n	80043f0 <UART_SetConfig+0x294>
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d00d      	beq.n	80043de <UART_SetConfig+0x282>
 80043c2:	dc15      	bgt.n	80043f0 <UART_SetConfig+0x294>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <UART_SetConfig+0x272>
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d005      	beq.n	80043d8 <UART_SetConfig+0x27c>
 80043cc:	e010      	b.n	80043f0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ce:	f7fe fca9 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 80043d2:	0003      	movs	r3, r0
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043d6:	e014      	b.n	8004402 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d8:	4b25      	ldr	r3, [pc, #148]	@ (8004470 <UART_SetConfig+0x314>)
 80043da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043dc:	e011      	b.n	8004402 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043de:	f7fe fc15 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 80043e2:	0003      	movs	r3, r0
 80043e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043e6:	e00c      	b.n	8004402 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e8:	2380      	movs	r3, #128	@ 0x80
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043ee:	e008      	b.n	8004402 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80043f4:	231a      	movs	r3, #26
 80043f6:	2220      	movs	r2, #32
 80043f8:	189b      	adds	r3, r3, r2
 80043fa:	19db      	adds	r3, r3, r7
 80043fc:	2201      	movs	r2, #1
 80043fe:	701a      	strb	r2, [r3, #0]
        break;
 8004400:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004404:	2b00      	cmp	r3, #0
 8004406:	d100      	bne.n	800440a <UART_SetConfig+0x2ae>
 8004408:	e14b      	b.n	80046a2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800440e:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <UART_SetConfig+0x318>)
 8004410:	0052      	lsls	r2, r2, #1
 8004412:	5ad3      	ldrh	r3, [r2, r3]
 8004414:	0019      	movs	r1, r3
 8004416:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004418:	f7fb fe74 	bl	8000104 <__udivsi3>
 800441c:	0003      	movs	r3, r0
 800441e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	0013      	movs	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	189b      	adds	r3, r3, r2
 800442a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800442c:	429a      	cmp	r2, r3
 800442e:	d305      	bcc.n	800443c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004436:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004438:	429a      	cmp	r2, r3
 800443a:	d91d      	bls.n	8004478 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800443c:	231a      	movs	r3, #26
 800443e:	2220      	movs	r2, #32
 8004440:	189b      	adds	r3, r3, r2
 8004442:	19db      	adds	r3, r3, r7
 8004444:	2201      	movs	r2, #1
 8004446:	701a      	strb	r2, [r3, #0]
 8004448:	e12b      	b.n	80046a2 <UART_SetConfig+0x546>
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	cfff69f3 	.word	0xcfff69f3
 8004450:	ffffcfff 	.word	0xffffcfff
 8004454:	40008000 	.word	0x40008000
 8004458:	11fff4ff 	.word	0x11fff4ff
 800445c:	40013800 	.word	0x40013800
 8004460:	40021000 	.word	0x40021000
 8004464:	40004400 	.word	0x40004400
 8004468:	40004800 	.word	0x40004800
 800446c:	40004c00 	.word	0x40004c00
 8004470:	00f42400 	.word	0x00f42400
 8004474:	08004e98 	.word	0x08004e98
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	2300      	movs	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004484:	4b92      	ldr	r3, [pc, #584]	@ (80046d0 <UART_SetConfig+0x574>)
 8004486:	0052      	lsls	r2, r2, #1
 8004488:	5ad3      	ldrh	r3, [r2, r3]
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	69b8      	ldr	r0, [r7, #24]
 8004496:	69f9      	ldr	r1, [r7, #28]
 8004498:	f7fb ffaa 	bl	80003f0 <__aeabi_uldivmod>
 800449c:	0002      	movs	r2, r0
 800449e:	000b      	movs	r3, r1
 80044a0:	0e11      	lsrs	r1, r2, #24
 80044a2:	021d      	lsls	r5, r3, #8
 80044a4:	430d      	orrs	r5, r1
 80044a6:	0214      	lsls	r4, r2, #8
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68b8      	ldr	r0, [r7, #8]
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	1900      	adds	r0, r0, r4
 80044ba:	4169      	adcs	r1, r5
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f7fb ff91 	bl	80003f0 <__aeabi_uldivmod>
 80044ce:	0002      	movs	r2, r0
 80044d0:	000b      	movs	r3, r1
 80044d2:	0013      	movs	r3, r2
 80044d4:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d8:	23c0      	movs	r3, #192	@ 0xc0
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	429a      	cmp	r2, r3
 80044de:	d309      	bcc.n	80044f4 <UART_SetConfig+0x398>
 80044e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	035b      	lsls	r3, r3, #13
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d204      	bcs.n	80044f4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044f0:	60da      	str	r2, [r3, #12]
 80044f2:	e0d6      	b.n	80046a2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80044f4:	231a      	movs	r3, #26
 80044f6:	2220      	movs	r2, #32
 80044f8:	189b      	adds	r3, r3, r2
 80044fa:	19db      	adds	r3, r3, r7
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e0cf      	b.n	80046a2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	69da      	ldr	r2, [r3, #28]
 8004506:	2380      	movs	r3, #128	@ 0x80
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	429a      	cmp	r2, r3
 800450c:	d000      	beq.n	8004510 <UART_SetConfig+0x3b4>
 800450e:	e070      	b.n	80045f2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004510:	231b      	movs	r3, #27
 8004512:	2220      	movs	r2, #32
 8004514:	189b      	adds	r3, r3, r2
 8004516:	19db      	adds	r3, r3, r7
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b08      	cmp	r3, #8
 800451c:	d015      	beq.n	800454a <UART_SetConfig+0x3ee>
 800451e:	dc18      	bgt.n	8004552 <UART_SetConfig+0x3f6>
 8004520:	2b04      	cmp	r3, #4
 8004522:	d00d      	beq.n	8004540 <UART_SetConfig+0x3e4>
 8004524:	dc15      	bgt.n	8004552 <UART_SetConfig+0x3f6>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <UART_SetConfig+0x3d4>
 800452a:	2b02      	cmp	r3, #2
 800452c:	d005      	beq.n	800453a <UART_SetConfig+0x3de>
 800452e:	e010      	b.n	8004552 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7fe fbf8 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8004534:	0003      	movs	r3, r0
 8004536:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004538:	e014      	b.n	8004564 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800453a:	4b66      	ldr	r3, [pc, #408]	@ (80046d4 <UART_SetConfig+0x578>)
 800453c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800453e:	e011      	b.n	8004564 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004540:	f7fe fb64 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8004544:	0003      	movs	r3, r0
 8004546:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004548:	e00c      	b.n	8004564 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454a:	2380      	movs	r3, #128	@ 0x80
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004550:	e008      	b.n	8004564 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004556:	231a      	movs	r3, #26
 8004558:	2220      	movs	r2, #32
 800455a:	189b      	adds	r3, r3, r2
 800455c:	19db      	adds	r3, r3, r7
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
        break;
 8004562:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004566:	2b00      	cmp	r3, #0
 8004568:	d100      	bne.n	800456c <UART_SetConfig+0x410>
 800456a:	e09a      	b.n	80046a2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004570:	4b57      	ldr	r3, [pc, #348]	@ (80046d0 <UART_SetConfig+0x574>)
 8004572:	0052      	lsls	r2, r2, #1
 8004574:	5ad3      	ldrh	r3, [r2, r3]
 8004576:	0019      	movs	r1, r3
 8004578:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800457a:	f7fb fdc3 	bl	8000104 <__udivsi3>
 800457e:	0003      	movs	r3, r0
 8004580:	005a      	lsls	r2, r3, #1
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	18d2      	adds	r2, r2, r3
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	0019      	movs	r1, r3
 8004590:	0010      	movs	r0, r2
 8004592:	f7fb fdb7 	bl	8000104 <__udivsi3>
 8004596:	0003      	movs	r3, r0
 8004598:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800459a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459c:	2b0f      	cmp	r3, #15
 800459e:	d921      	bls.n	80045e4 <UART_SetConfig+0x488>
 80045a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a2:	2380      	movs	r3, #128	@ 0x80
 80045a4:	025b      	lsls	r3, r3, #9
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d21c      	bcs.n	80045e4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	200e      	movs	r0, #14
 80045b0:	2420      	movs	r4, #32
 80045b2:	1903      	adds	r3, r0, r4
 80045b4:	19db      	adds	r3, r3, r7
 80045b6:	210f      	movs	r1, #15
 80045b8:	438a      	bics	r2, r1
 80045ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	085b      	lsrs	r3, r3, #1
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2207      	movs	r2, #7
 80045c4:	4013      	ands	r3, r2
 80045c6:	b299      	uxth	r1, r3
 80045c8:	1903      	adds	r3, r0, r4
 80045ca:	19db      	adds	r3, r3, r7
 80045cc:	1902      	adds	r2, r0, r4
 80045ce:	19d2      	adds	r2, r2, r7
 80045d0:	8812      	ldrh	r2, [r2, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	1902      	adds	r2, r0, r4
 80045dc:	19d2      	adds	r2, r2, r7
 80045de:	8812      	ldrh	r2, [r2, #0]
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	e05e      	b.n	80046a2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80045e4:	231a      	movs	r3, #26
 80045e6:	2220      	movs	r2, #32
 80045e8:	189b      	adds	r3, r3, r2
 80045ea:	19db      	adds	r3, r3, r7
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	e057      	b.n	80046a2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045f2:	231b      	movs	r3, #27
 80045f4:	2220      	movs	r2, #32
 80045f6:	189b      	adds	r3, r3, r2
 80045f8:	19db      	adds	r3, r3, r7
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d015      	beq.n	800462c <UART_SetConfig+0x4d0>
 8004600:	dc18      	bgt.n	8004634 <UART_SetConfig+0x4d8>
 8004602:	2b04      	cmp	r3, #4
 8004604:	d00d      	beq.n	8004622 <UART_SetConfig+0x4c6>
 8004606:	dc15      	bgt.n	8004634 <UART_SetConfig+0x4d8>
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <UART_SetConfig+0x4b6>
 800460c:	2b02      	cmp	r3, #2
 800460e:	d005      	beq.n	800461c <UART_SetConfig+0x4c0>
 8004610:	e010      	b.n	8004634 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004612:	f7fe fb87 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8004616:	0003      	movs	r3, r0
 8004618:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800461a:	e014      	b.n	8004646 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800461c:	4b2d      	ldr	r3, [pc, #180]	@ (80046d4 <UART_SetConfig+0x578>)
 800461e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004620:	e011      	b.n	8004646 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004622:	f7fe faf3 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8004626:	0003      	movs	r3, r0
 8004628:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800462a:	e00c      	b.n	8004646 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462c:	2380      	movs	r3, #128	@ 0x80
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004632:	e008      	b.n	8004646 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004638:	231a      	movs	r3, #26
 800463a:	2220      	movs	r2, #32
 800463c:	189b      	adds	r3, r3, r2
 800463e:	19db      	adds	r3, r3, r7
 8004640:	2201      	movs	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
        break;
 8004644:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02a      	beq.n	80046a2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004650:	4b1f      	ldr	r3, [pc, #124]	@ (80046d0 <UART_SetConfig+0x574>)
 8004652:	0052      	lsls	r2, r2, #1
 8004654:	5ad3      	ldrh	r3, [r2, r3]
 8004656:	0019      	movs	r1, r3
 8004658:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800465a:	f7fb fd53 	bl	8000104 <__udivsi3>
 800465e:	0003      	movs	r3, r0
 8004660:	001a      	movs	r2, r3
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	18d2      	adds	r2, r2, r3
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	0019      	movs	r1, r3
 8004670:	0010      	movs	r0, r2
 8004672:	f7fb fd47 	bl	8000104 <__udivsi3>
 8004676:	0003      	movs	r3, r0
 8004678:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	2b0f      	cmp	r3, #15
 800467e:	d90a      	bls.n	8004696 <UART_SetConfig+0x53a>
 8004680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004682:	2380      	movs	r3, #128	@ 0x80
 8004684:	025b      	lsls	r3, r3, #9
 8004686:	429a      	cmp	r2, r3
 8004688:	d205      	bcs.n	8004696 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468c:	b29a      	uxth	r2, r3
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60da      	str	r2, [r3, #12]
 8004694:	e005      	b.n	80046a2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004696:	231a      	movs	r3, #26
 8004698:	2220      	movs	r2, #32
 800469a:	189b      	adds	r3, r3, r2
 800469c:	19db      	adds	r3, r3, r7
 800469e:	2201      	movs	r2, #1
 80046a0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	226a      	movs	r2, #106	@ 0x6a
 80046a6:	2101      	movs	r1, #1
 80046a8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	2268      	movs	r2, #104	@ 0x68
 80046ae:	2101      	movs	r1, #1
 80046b0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	2200      	movs	r2, #0
 80046b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	2200      	movs	r2, #0
 80046bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80046be:	231a      	movs	r3, #26
 80046c0:	2220      	movs	r2, #32
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	19db      	adds	r3, r3, r7
 80046c6:	781b      	ldrb	r3, [r3, #0]
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b010      	add	sp, #64	@ 0x40
 80046ce:	bdb0      	pop	{r4, r5, r7, pc}
 80046d0:	08004e98 	.word	0x08004e98
 80046d4:	00f42400 	.word	0x00f42400

080046d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e4:	2208      	movs	r2, #8
 80046e6:	4013      	ands	r3, r2
 80046e8:	d00b      	beq.n	8004702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4a4a      	ldr	r2, [pc, #296]	@ (800481c <UART_AdvFeatureConfig+0x144>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	0019      	movs	r1, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004706:	2201      	movs	r2, #1
 8004708:	4013      	ands	r3, r2
 800470a:	d00b      	beq.n	8004724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4a43      	ldr	r2, [pc, #268]	@ (8004820 <UART_AdvFeatureConfig+0x148>)
 8004714:	4013      	ands	r3, r2
 8004716:	0019      	movs	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	2202      	movs	r2, #2
 800472a:	4013      	ands	r3, r2
 800472c:	d00b      	beq.n	8004746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4a3b      	ldr	r2, [pc, #236]	@ (8004824 <UART_AdvFeatureConfig+0x14c>)
 8004736:	4013      	ands	r3, r2
 8004738:	0019      	movs	r1, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474a:	2204      	movs	r2, #4
 800474c:	4013      	ands	r3, r2
 800474e:	d00b      	beq.n	8004768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4a34      	ldr	r2, [pc, #208]	@ (8004828 <UART_AdvFeatureConfig+0x150>)
 8004758:	4013      	ands	r3, r2
 800475a:	0019      	movs	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476c:	2210      	movs	r2, #16
 800476e:	4013      	ands	r3, r2
 8004770:	d00b      	beq.n	800478a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a2c      	ldr	r2, [pc, #176]	@ (800482c <UART_AdvFeatureConfig+0x154>)
 800477a:	4013      	ands	r3, r2
 800477c:	0019      	movs	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478e:	2220      	movs	r2, #32
 8004790:	4013      	ands	r3, r2
 8004792:	d00b      	beq.n	80047ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	4a25      	ldr	r2, [pc, #148]	@ (8004830 <UART_AdvFeatureConfig+0x158>)
 800479c:	4013      	ands	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	2240      	movs	r2, #64	@ 0x40
 80047b2:	4013      	ands	r3, r2
 80047b4:	d01d      	beq.n	80047f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004834 <UART_AdvFeatureConfig+0x15c>)
 80047be:	4013      	ands	r3, r2
 80047c0:	0019      	movs	r1, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047d2:	2380      	movs	r3, #128	@ 0x80
 80047d4:	035b      	lsls	r3, r3, #13
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d10b      	bne.n	80047f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4a15      	ldr	r2, [pc, #84]	@ (8004838 <UART_AdvFeatureConfig+0x160>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	0019      	movs	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f6:	2280      	movs	r2, #128	@ 0x80
 80047f8:	4013      	ands	r3, r2
 80047fa:	d00b      	beq.n	8004814 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4a0e      	ldr	r2, [pc, #56]	@ (800483c <UART_AdvFeatureConfig+0x164>)
 8004804:	4013      	ands	r3, r2
 8004806:	0019      	movs	r1, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	605a      	str	r2, [r3, #4]
  }
}
 8004814:	46c0      	nop			@ (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b002      	add	sp, #8
 800481a:	bd80      	pop	{r7, pc}
 800481c:	ffff7fff 	.word	0xffff7fff
 8004820:	fffdffff 	.word	0xfffdffff
 8004824:	fffeffff 	.word	0xfffeffff
 8004828:	fffbffff 	.word	0xfffbffff
 800482c:	ffffefff 	.word	0xffffefff
 8004830:	ffffdfff 	.word	0xffffdfff
 8004834:	ffefffff 	.word	0xffefffff
 8004838:	ff9fffff 	.word	0xff9fffff
 800483c:	fff7ffff 	.word	0xfff7ffff

08004840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b092      	sub	sp, #72	@ 0x48
 8004844:	af02      	add	r7, sp, #8
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2290      	movs	r2, #144	@ 0x90
 800484c:	2100      	movs	r1, #0
 800484e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004850:	f7fc faf0 	bl	8000e34 <HAL_GetTick>
 8004854:	0003      	movs	r3, r0
 8004856:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2208      	movs	r2, #8
 8004860:	4013      	ands	r3, r2
 8004862:	2b08      	cmp	r3, #8
 8004864:	d12d      	bne.n	80048c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004868:	2280      	movs	r2, #128	@ 0x80
 800486a:	0391      	lsls	r1, r2, #14
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	4a47      	ldr	r2, [pc, #284]	@ (800498c <UART_CheckIdleState+0x14c>)
 8004870:	9200      	str	r2, [sp, #0]
 8004872:	2200      	movs	r2, #0
 8004874:	f000 f88e 	bl	8004994 <UART_WaitOnFlagUntilTimeout>
 8004878:	1e03      	subs	r3, r0, #0
 800487a:	d022      	beq.n	80048c2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800487c:	f3ef 8310 	mrs	r3, PRIMASK
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004884:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004886:	2301      	movs	r3, #1
 8004888:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488c:	f383 8810 	msr	PRIMASK, r3
}
 8004890:	46c0      	nop			@ (mov r8, r8)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2180      	movs	r1, #128	@ 0x80
 800489e:	438a      	bics	r2, r1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a8:	f383 8810 	msr	PRIMASK, r3
}
 80048ac:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2288      	movs	r2, #136	@ 0x88
 80048b2:	2120      	movs	r1, #32
 80048b4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2284      	movs	r2, #132	@ 0x84
 80048ba:	2100      	movs	r1, #0
 80048bc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e060      	b.n	8004984 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2204      	movs	r2, #4
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d146      	bne.n	800495e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048d2:	2280      	movs	r2, #128	@ 0x80
 80048d4:	03d1      	lsls	r1, r2, #15
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4a2c      	ldr	r2, [pc, #176]	@ (800498c <UART_CheckIdleState+0x14c>)
 80048da:	9200      	str	r2, [sp, #0]
 80048dc:	2200      	movs	r2, #0
 80048de:	f000 f859 	bl	8004994 <UART_WaitOnFlagUntilTimeout>
 80048e2:	1e03      	subs	r3, r0, #0
 80048e4:	d03b      	beq.n	800495e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80048ec:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f0:	2301      	movs	r3, #1
 80048f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4922      	ldr	r1, [pc, #136]	@ (8004990 <UART_CheckIdleState+0x150>)
 8004908:	400a      	ands	r2, r1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f383 8810 	msr	PRIMASK, r3
}
 8004916:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004918:	f3ef 8310 	mrs	r3, PRIMASK
 800491c:	61bb      	str	r3, [r7, #24]
  return(result);
 800491e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004920:	633b      	str	r3, [r7, #48]	@ 0x30
 8004922:	2301      	movs	r3, #1
 8004924:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	f383 8810 	msr	PRIMASK, r3
}
 800492c:	46c0      	nop			@ (mov r8, r8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2101      	movs	r1, #1
 800493a:	438a      	bics	r2, r1
 800493c:	609a      	str	r2, [r3, #8]
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	f383 8810 	msr	PRIMASK, r3
}
 8004948:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	228c      	movs	r2, #140	@ 0x8c
 800494e:	2120      	movs	r1, #32
 8004950:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2284      	movs	r2, #132	@ 0x84
 8004956:	2100      	movs	r1, #0
 8004958:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e012      	b.n	8004984 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2288      	movs	r2, #136	@ 0x88
 8004962:	2120      	movs	r1, #32
 8004964:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	228c      	movs	r2, #140	@ 0x8c
 800496a:	2120      	movs	r1, #32
 800496c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2284      	movs	r2, #132	@ 0x84
 800497e:	2100      	movs	r1, #0
 8004980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	0018      	movs	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	b010      	add	sp, #64	@ 0x40
 800498a:	bd80      	pop	{r7, pc}
 800498c:	01ffffff 	.word	0x01ffffff
 8004990:	fffffedf 	.word	0xfffffedf

08004994 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	1dfb      	adds	r3, r7, #7
 80049a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a4:	e051      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	3301      	adds	r3, #1
 80049aa:	d04e      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ac:	f7fc fa42 	bl	8000e34 <HAL_GetTick>
 80049b0:	0002      	movs	r2, r0
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d302      	bcc.n	80049c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e051      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2204      	movs	r2, #4
 80049ce:	4013      	ands	r3, r2
 80049d0:	d03b      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xb6>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b80      	cmp	r3, #128	@ 0x80
 80049d6:	d038      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xb6>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b40      	cmp	r3, #64	@ 0x40
 80049dc:	d035      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	2208      	movs	r2, #8
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d111      	bne.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2208      	movs	r2, #8
 80049f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	0018      	movs	r0, r3
 80049f8:	f000 f83c 	bl	8004a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2290      	movs	r2, #144	@ 0x90
 8004a00:	2108      	movs	r1, #8
 8004a02:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2284      	movs	r2, #132	@ 0x84
 8004a08:	2100      	movs	r1, #0
 8004a0a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e02c      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69da      	ldr	r2, [r3, #28]
 8004a16:	2380      	movs	r3, #128	@ 0x80
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	401a      	ands	r2, r3
 8004a1c:	2380      	movs	r3, #128	@ 0x80
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d112      	bne.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2280      	movs	r2, #128	@ 0x80
 8004a2a:	0112      	lsls	r2, r2, #4
 8004a2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	0018      	movs	r0, r3
 8004a32:	f000 f81f 	bl	8004a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2290      	movs	r2, #144	@ 0x90
 8004a3a:	2120      	movs	r1, #32
 8004a3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2284      	movs	r2, #132	@ 0x84
 8004a42:	2100      	movs	r1, #0
 8004a44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e00f      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	4013      	ands	r3, r2
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	425a      	negs	r2, r3
 8004a5a:	4153      	adcs	r3, r2
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	001a      	movs	r2, r3
 8004a60:	1dfb      	adds	r3, r7, #7
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d09e      	beq.n	80049a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b004      	add	sp, #16
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08e      	sub	sp, #56	@ 0x38
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a80:	617b      	str	r3, [r7, #20]
  return(result);
 8004a82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a86:	2301      	movs	r3, #1
 8004a88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f383 8810 	msr	PRIMASK, r3
}
 8004a90:	46c0      	nop			@ (mov r8, r8)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4926      	ldr	r1, [pc, #152]	@ (8004b38 <UART_EndRxTransfer+0xc4>)
 8004a9e:	400a      	ands	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f383 8810 	msr	PRIMASK, r3
}
 8004aac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aae:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab2:	623b      	str	r3, [r7, #32]
  return(result);
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ab6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ab8:	2301      	movs	r3, #1
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	491b      	ldr	r1, [pc, #108]	@ (8004b3c <UART_EndRxTransfer+0xc8>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ada:	f383 8810 	msr	PRIMASK, r3
}
 8004ade:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d118      	bne.n	8004b1a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8004aec:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004af2:	2301      	movs	r3, #1
 8004af4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f383 8810 	msr	PRIMASK, r3
}
 8004afc:	46c0      	nop			@ (mov r8, r8)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2110      	movs	r1, #16
 8004b0a:	438a      	bics	r2, r1
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f383 8810 	msr	PRIMASK, r3
}
 8004b18:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	228c      	movs	r2, #140	@ 0x8c
 8004b1e:	2120      	movs	r1, #32
 8004b20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b2e:	46c0      	nop			@ (mov r8, r8)
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b00e      	add	sp, #56	@ 0x38
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	46c0      	nop			@ (mov r8, r8)
 8004b38:	fffffedf 	.word	0xfffffedf
 8004b3c:	effffffe 	.word	0xeffffffe

08004b40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2284      	movs	r2, #132	@ 0x84
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e027      	b.n	8004ba6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2284      	movs	r2, #132	@ 0x84
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2288      	movs	r2, #136	@ 0x88
 8004b62:	2124      	movs	r1, #36	@ 0x24
 8004b64:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	438a      	bics	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4a0b      	ldr	r2, [pc, #44]	@ (8004bb0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2288      	movs	r2, #136	@ 0x88
 8004b98:	2120      	movs	r1, #32
 8004b9a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2284      	movs	r2, #132	@ 0x84
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b004      	add	sp, #16
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	dfffffff 	.word	0xdfffffff

08004bb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2284      	movs	r2, #132	@ 0x84
 8004bc2:	5c9b      	ldrb	r3, [r3, r2]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e02e      	b.n	8004c2a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2284      	movs	r2, #132	@ 0x84
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2288      	movs	r2, #136	@ 0x88
 8004bd8:	2124      	movs	r1, #36	@ 0x24
 8004bda:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2101      	movs	r1, #1
 8004bf0:	438a      	bics	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	08d9      	lsrs	r1, r3, #3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 f854 	bl	8004cb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2288      	movs	r2, #136	@ 0x88
 8004c1c:	2120      	movs	r1, #32
 8004c1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2284      	movs	r2, #132	@ 0x84
 8004c24:	2100      	movs	r1, #0
 8004c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b004      	add	sp, #16
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2284      	movs	r2, #132	@ 0x84
 8004c42:	5c9b      	ldrb	r3, [r3, r2]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e02f      	b.n	8004cac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2284      	movs	r2, #132	@ 0x84
 8004c50:	2101      	movs	r1, #1
 8004c52:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2288      	movs	r2, #136	@ 0x88
 8004c58:	2124      	movs	r1, #36	@ 0x24
 8004c5a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2101      	movs	r1, #1
 8004c70:	438a      	bics	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8004cb4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	0019      	movs	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f000 f813 	bl	8004cb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2288      	movs	r2, #136	@ 0x88
 8004c9e:	2120      	movs	r1, #32
 8004ca0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2284      	movs	r2, #132	@ 0x84
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	0018      	movs	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b004      	add	sp, #16
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	f1ffffff 	.word	0xf1ffffff

08004cb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d108      	bne.n	8004cda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	226a      	movs	r2, #106	@ 0x6a
 8004ccc:	2101      	movs	r1, #1
 8004cce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2268      	movs	r2, #104	@ 0x68
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004cd8:	e043      	b.n	8004d62 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004cda:	260f      	movs	r6, #15
 8004cdc:	19bb      	adds	r3, r7, r6
 8004cde:	2208      	movs	r2, #8
 8004ce0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ce2:	200e      	movs	r0, #14
 8004ce4:	183b      	adds	r3, r7, r0
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	0e5b      	lsrs	r3, r3, #25
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	240d      	movs	r4, #13
 8004cf6:	193b      	adds	r3, r7, r4
 8004cf8:	2107      	movs	r1, #7
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	0f5b      	lsrs	r3, r3, #29
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	250c      	movs	r5, #12
 8004d0a:	197b      	adds	r3, r7, r5
 8004d0c:	2107      	movs	r1, #7
 8004d0e:	400a      	ands	r2, r1
 8004d10:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d12:	183b      	adds	r3, r7, r0
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	197a      	adds	r2, r7, r5
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	4914      	ldr	r1, [pc, #80]	@ (8004d6c <UARTEx_SetNbDataToProcess+0xb4>)
 8004d1c:	5c8a      	ldrb	r2, [r1, r2]
 8004d1e:	435a      	muls	r2, r3
 8004d20:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d22:	197b      	adds	r3, r7, r5
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	4a12      	ldr	r2, [pc, #72]	@ (8004d70 <UARTEx_SetNbDataToProcess+0xb8>)
 8004d28:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	f7fb fa74 	bl	8000218 <__divsi3>
 8004d30:	0003      	movs	r3, r0
 8004d32:	b299      	uxth	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	226a      	movs	r2, #106	@ 0x6a
 8004d38:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d3a:	19bb      	adds	r3, r7, r6
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	193a      	adds	r2, r7, r4
 8004d40:	7812      	ldrb	r2, [r2, #0]
 8004d42:	490a      	ldr	r1, [pc, #40]	@ (8004d6c <UARTEx_SetNbDataToProcess+0xb4>)
 8004d44:	5c8a      	ldrb	r2, [r1, r2]
 8004d46:	435a      	muls	r2, r3
 8004d48:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d4a:	193b      	adds	r3, r7, r4
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	4a08      	ldr	r2, [pc, #32]	@ (8004d70 <UARTEx_SetNbDataToProcess+0xb8>)
 8004d50:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d52:	0019      	movs	r1, r3
 8004d54:	f7fb fa60 	bl	8000218 <__divsi3>
 8004d58:	0003      	movs	r3, r0
 8004d5a:	b299      	uxth	r1, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2268      	movs	r2, #104	@ 0x68
 8004d60:	5299      	strh	r1, [r3, r2]
}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b005      	add	sp, #20
 8004d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	08004eb0 	.word	0x08004eb0
 8004d70:	08004eb8 	.word	0x08004eb8

08004d74 <memset>:
 8004d74:	0003      	movs	r3, r0
 8004d76:	1882      	adds	r2, r0, r2
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d100      	bne.n	8004d7e <memset+0xa>
 8004d7c:	4770      	bx	lr
 8004d7e:	7019      	strb	r1, [r3, #0]
 8004d80:	3301      	adds	r3, #1
 8004d82:	e7f9      	b.n	8004d78 <memset+0x4>

08004d84 <__libc_init_array>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	2600      	movs	r6, #0
 8004d88:	4c0c      	ldr	r4, [pc, #48]	@ (8004dbc <__libc_init_array+0x38>)
 8004d8a:	4d0d      	ldr	r5, [pc, #52]	@ (8004dc0 <__libc_init_array+0x3c>)
 8004d8c:	1b64      	subs	r4, r4, r5
 8004d8e:	10a4      	asrs	r4, r4, #2
 8004d90:	42a6      	cmp	r6, r4
 8004d92:	d109      	bne.n	8004da8 <__libc_init_array+0x24>
 8004d94:	2600      	movs	r6, #0
 8004d96:	f000 f819 	bl	8004dcc <_init>
 8004d9a:	4c0a      	ldr	r4, [pc, #40]	@ (8004dc4 <__libc_init_array+0x40>)
 8004d9c:	4d0a      	ldr	r5, [pc, #40]	@ (8004dc8 <__libc_init_array+0x44>)
 8004d9e:	1b64      	subs	r4, r4, r5
 8004da0:	10a4      	asrs	r4, r4, #2
 8004da2:	42a6      	cmp	r6, r4
 8004da4:	d105      	bne.n	8004db2 <__libc_init_array+0x2e>
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
 8004da8:	00b3      	lsls	r3, r6, #2
 8004daa:	58eb      	ldr	r3, [r5, r3]
 8004dac:	4798      	blx	r3
 8004dae:	3601      	adds	r6, #1
 8004db0:	e7ee      	b.n	8004d90 <__libc_init_array+0xc>
 8004db2:	00b3      	lsls	r3, r6, #2
 8004db4:	58eb      	ldr	r3, [r5, r3]
 8004db6:	4798      	blx	r3
 8004db8:	3601      	adds	r6, #1
 8004dba:	e7f2      	b.n	8004da2 <__libc_init_array+0x1e>
 8004dbc:	08004ec8 	.word	0x08004ec8
 8004dc0:	08004ec8 	.word	0x08004ec8
 8004dc4:	08004ecc 	.word	0x08004ecc
 8004dc8:	08004ec8 	.word	0x08004ec8

08004dcc <_init>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd2:	bc08      	pop	{r3}
 8004dd4:	469e      	mov	lr, r3
 8004dd6:	4770      	bx	lr

08004dd8 <_fini>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dde:	bc08      	pop	{r3}
 8004de0:	469e      	mov	lr, r3
 8004de2:	4770      	bx	lr
